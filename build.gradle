plugins {
    id 'groovy'
    id 'java'

    // Test reporting :
    id 'jacoco'

    // Public deployment :
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    // For static null checking:
    id "net.ltgt.errorprone" version "3.1.0"
}

// If current version >= 11 we can do static analysis:
boolean WE_CAN_DO_STATIC_ANALYSIS = JavaVersion.current().isJava11Compatible()
println "Static analysis enabled: $WE_CAN_DO_STATIC_ANALYSIS"

String GROUP_ID = "io.github.globaltcad"
String PROJECT  = "sprouts"
String VERSION  = "2.0.0"

group = GROUP_ID
version = VERSION

[compileJava, compileTestJava, compileGroovy, compileTestGroovy]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

dependencies {

    if ( WE_CAN_DO_STATIC_ANALYSIS ) {
        errorprone "com.uber.nullaway:nullaway:0.11.1"
        compileOnly "com.google.code.findbugs:jsr305:3.0.2"
        errorprone "com.google.errorprone:error_prone_core:2.29.2"
    }
    else
        errorprone "com.google.errorprone:error_prone_core:2.9.+"

    implementation group: 'org.jspecify', name: 'jspecify', version: '[1+, )'

    // Logging :
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '[1+, )'
    // Note that we are lenient with the version of slf4j, as we do not want to force a specific version on the user.

    // Testing :
    testImplementation platform('org.junit:junit-bom:5.11.2') // JUnit BOM for version management
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher' // Required for test execution

    testImplementation group: 'com.athaydes', name: 'spock-reports', version: '2.5.1-groovy-4.0'
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.3-groovy-4.0'

    // if you don't already have slf4j-api and an implementation of it in the classpath, add this! (needed for reports)
    testImplementation 'org.slf4j:slf4j-api:1.7.30'
    testCompileOnly 'org.slf4j:slf4j-simple:1.7.30'
}

if ( WE_CAN_DO_STATIC_ANALYSIS ) {
    tasks.withType(JavaCompile) {
        // remove the if condition if you want to run NullAway on test code
        if (!name.toLowerCase().contains("test")) {
            options.errorprone {
                check("NullAway", net.ltgt.gradle.errorprone.CheckSeverity.ERROR)
                option("NullAway:AnnotatedPackages", "")
            }
        } else {
            options.errorprone {
                check("NullAway", net.ltgt.gradle.errorprone.CheckSeverity.WARN)
                option("NullAway:AnnotatedPackages", "")
            }
        }
    }
}
test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

// CONFIGURING TEST REPORTING :

jacoco {
    toolVersion = "0.8.13"
    reportsDirectory.set(file("docs/coverage"))
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        csv.required.set(false)
    }
}
check.dependsOn jacocoTestReport

// CUSTOM DEPLOYMENT TASKS :

// 1: Cleanup
task cleanForDeployment(type: Delete) {
    delete "$rootDir/build"
    delete fileTree("$rootDir/docs/jdocs/") { include '**/*' }
    delete fileTree("$rootDir/docs/spock/json/") { include '**/*' }
    delete fileTree("$rootDir/docs/spock/reports/") { include '**/*' }
    delete fileTree("$rootDir/docs/coverage/test/") { include '**/*' }
}

// 2:
task deploy() {

    // Expected before : dependsOn 'cleanForDeployment'
    dependsOn 'clean'
    dependsOn 'jar'
    dependsOn 'releaseJDocs'
    dependsOn 'check'
    dependsOn 'publishToSonatype'
    finalizedBy 'closeAndReleaseSonatypeStagingRepository'
}
/*
      Note that you need the correct gradle.properties file in
      your home directory (~/.gradle/gradle.properties)
      It should look something like this:
      ```
            signing.keyId=<my-key-id>
            signing.password=<my-key-password>
            signing.secretKeyRingFile=<my/path/to/my/.gnupg-keyring/secring.gpg>

            sonatypeUsername=<my-token-name>
            sonatypePassword=<my-publish-token>

            ossrhUsername=<my-username>
            ossrhPassword=<my-password>

            # https://central.sonatype.com/publishing/deployments
            ossrhToken=<my-token-name>
            ossrhTokenPassword=<my-publish-token>
      ```
*/

// Depends on javadocs Task
task releaseJDocs(type: Copy) {
    dependsOn 'javadoc'
    from "$rootDir/build/docs/javadoc"
    into "$rootDir/docs/jdocs"
}

// JAR CREATION :

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

// JDOC CREATION:

task createJDocs(type: Javadoc){
    destinationDir = new File("$projectDir/docs/jdocs")
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}


// MAVEN DEPLOYMENT CONFIGURATION: 

artifacts {
    archives javadocJar, sourcesJar
}

java {
    sourceCompatibility = 8
    targetCompatibility = 8
    withJavadocJar()
    withSourcesJar()
}

ext.genOutputDir = file("$buildDir/generated-resources")

task generateVersionTxt()  {
    ext.outputFile = file("$genOutputDir/version.txt")
    outputs.file(outputFile)
    doLast {
        outputFile.text = """GroupId: ${project.group}
Name: ${project.name}
Version: $version
Build-time: ${java.time.LocalDateTime.now()}
"""
    }
}

sourceSets.main.output.dir genOutputDir, builtBy: generateVersionTxt


signing {
    required = { !VERSION.startsWith("0.") && gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
    sign publishing.publications
}

nexusPublishing {
    packageGroup = GROUP_ID
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
        }
    }
    transitionCheckOptions {
        // closing checks take some time so increase the retries
        // total time is maxRetries(180) * delayBetween(10s) = 30m
        maxRetries.set(180)
    }
}

publishing {
    repositories {
        maven {
            name = 'ossrh-staging-api'
            url = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty("ossrhToken") as String
                password = findProperty("ossrhTokenPassword") as String
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = PROJECT
                description = 'A property and state management library.'
                url = 'https://globaltcad.github.io/'+PROJECT+'/index.html'
                organization {
                    name = 'Global TCAD Solutions'
                    url = 'https://www.globaltcad.com/'
                }
                issueManagement {
                    system = 'Github'
                    url = 'https://github.com/globaltcad/'+PROJECT+'/issues'
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = "https://raw.githubusercontent.com/globaltcad/"+PROJECT+"/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "dnepp"
                        name = "Daniel Nepp"
                        email = "d.nepp@globaltcad.com"
                    }
                    developer {
                        id = "mschwengerer"
                        name = "Mathias Schwengerer"
                        email = "m.schwengerer@globaltcad.com"
                    }
                    developer {
                        id = "hdemel"
                        name = "Harald Demel"
                        email = "h.demel@globaltcad.com"
                    }
                }
                scm {
                    url = 'https://github.com/globaltcad/'+PROJECT+''
                    connection = 'scm:git:git://github.com/globaltcad/'+PROJECT+'.git'
                    developerConnection = 'scm:git:ssh://git@github.com:globaltcad/'+PROJECT+'.git'
                }
            }
        }
    }
}
