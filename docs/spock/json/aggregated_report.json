{"sprouts.MVVM_Unit_Test_Spec":{"executedFeatures":["The register button does nothing if the inputs are not all valid.","The registration view model will display feedback about invalid inputs."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":52},"title":"Writing Unit Tests for View Models","narrative":"Not only is Swing-Tree a framework for building UIs, it is also a framework for\n    building view models based on its built in property types. \n    This specification demonstrates how to write unit tests\n    for the example view models in the test suite."},"sprouts.Properties_List_Spec":{"executedFeatures":["A list of properties can be turned into an immutable \"Vals\" list using the \"toVals\" method.","A list of properties can be turned into lists, sets or maps using various convenience methods.","Both the \"Vars\" and immutable \"Vals\" types can be used for functional programming.","Change listeners registered on a property list will be called when the list is sorted.","Just like a regular \"Var\" property you can register change listeners on \"Vars\".","Lists of properties can be sorted based on their natural order through the \"sort\" method.","Lists of properties can be sorted using a custom comparator through the \"sort\" method.","Map a \"Vals\" instance from one type of properties to another.","Map a \"Vars\" instance from one type of properties to another.","Multiple properties can be modelled through the \"Vars\" and \"Vals\" classes.","The \"Vars\" is a list of properties which can grow and shrink.","The \"makeDistinct\" method on a mutable list of properties modifies the list in-place.","The display action of a property or list of properties will not be called if they report \"canBeRemoved()\"","The listeners registered in property lists will be informed what type of modification occurred.","The properties of one property list can be added to another property list.","You can create a \"Vars\" list from a regular List of properties.","You can create the \"Vars\"/\"Vals\" property lists from property instances.","You can remove n leading or trailing entries from a property list."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":18,"totalFeatures":18,"passed":18,"successRate":1.0,"time":63},"title":"Lists of Properties","narrative":"Just like properties you can create lists of properties\n    and then bind them to UI components.\n    They are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    This specification shows how to use the various\n    methods exposed by the property lists classes, \n    namely \"Vals\" (immutable) and \"Vars\" (mutable)."},"sprouts.Properties_Spec":{"executedFeatures":["A property can be converted to an Optional.","A property constructed using the \"of\" factory method, does not allow null items.","Changing the value of a property through the \"act\" method will also affect its views","Conveniently compare the item of a property with another item using \"is\", \"isOneOf\" or \"isNot\"","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onSetItem(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"withID(..)\" method produces a new property with all bindings inherited.","The UI uses the \"act(T)\" method to change the property state to avoid feedback looping.","The equality and hash code of a property are based on its value, type and id!","The string representation of a property will give you all the information you need.","There are 2 types of properties, an immutable property, and its mutable sub-type.","There are various kinds of convenience methods for creating live view of properties.","They can be bound to the UI by passing them to a builder node.","Use the \"viewAs\" method to create a dynamically updated view of a property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":6,"skipped":0,"totalRuns":18,"totalFeatures":18,"passed":12,"successRate":0.6666666666666666,"time":36},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"sprouts.Property_Binding_Spec":{"executedFeatures":["Bind to both width and height independently if you want to.","Enable or disable the split items of a JSplitButton through properties.","Minimum as well as maximum height of UI components can be modelled using integer properties.","Simple integer properties can be bound to the width or height of components.","The focusability of a UI component can be modelled dynamically using boolean properties.","The visibility of a UI component can be modelled dynamically using boolean properties.","The width and height of UI components can be modelled using integer properties.","We can bind a property to the size of a swing component.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":12,"skipped":0,"totalRuns":12,"totalFeatures":12,"passed":0,"successRate":0.0,"time":18},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"sprouts.Property_Safety_Spec":{"executedFeatures":["\"Vals\", a list of properties, is immutable.","A \"Val\" instance is immutable.","A \"Var\" may only wrap null if it is created as nullable.","A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","Swing-Tree will not allow you to model certain UI state using nullable properties.","The \"get\" method of a property throws an exception if the property is null.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null items."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":8,"totalFeatures":8,"passed":8,"successRate":1.0,"time":17},"title":"Property Null and Mutability Safety","narrative":"Properties are a core concept in Swing-Tree. They are in essence\n    just wrapper classes used to represent the state of your views.\n    Because of this, it is important that properties are\n    are nullable only when they need to be, and that they are\n    immutable only when they need to be."},"sprouts.Properties_Spec":{"executedFeatures":["A property can be converted to an Optional.","A property constructed using the \"of\" factory method, does not allow null items.","Changing the value of a property through the \"act\" method will also affect its views","Conveniently compare the item of a property with another item using \"is\", \"isOneOf\" or \"isNot\"","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onSetItem(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"withID(..)\" method produces a new property with all bindings inherited.","The UI uses the \"act(T)\" method to change the property state to avoid feedback looping.","The equality and hash code of a property are based on its value, type and id!","The string representation of a property will give you all the information you need.","There are 2 types of properties, an immutable property, and its mutable sub-type.","There are various kinds of convenience methods for creating live view of properties.","Use the \"viewAs\" method to create a dynamically updated view of a property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":17,"totalFeatures":17,"passed":17,"successRate":1.0,"time":95},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"sprouts.Property_Binding_Spec":{"executedFeatures":["Bind to both width and height independently if you want to.","Enable or disable the split items of a JSplitButton through properties.","Minimum as well as maximum height of UI components can be modelled using integer properties.","Simple integer properties can be bound to the width or height of components.","The focusability of a UI component can be modelled dynamically using boolean properties.","The visibility of a UI component can be modelled dynamically using boolean properties.","The width and height of UI components can be modelled using integer properties.","We can bind to the color of a component.","We can bind to the text of a component.","We can enable and disable a UI component dynamically through property binding.","We can select or unselect a UI component dynamically through properties."],"ignoredFeatures":[],"stats":{"failures":0,"errors":11,"skipped":0,"totalRuns":11,"totalFeatures":11,"passed":0,"successRate":0.0,"time":35},"title":"Property Binding","narrative":"This specification shows you how to bind properties to \n    the states of common types UI components."},"sprouts.MVVM_Unit_Test_Spec":{"executedFeatures":["The register button does nothing if the inputs are not all valid.","The registration view model will display feedback about invalid inputs."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":6},"title":"Writing Unit Tests for View Models","narrative":"Not only is Swing-Tree a framework for building UIs, it is also a framework for\n    building view models based on its built in property types. \n    This specification demonstrates how to write unit tests\n    for the example view models in the test suite."},"sprouts.Properties_List_Spec":{"executedFeatures":["A list of properties can be turned into an immutable \"Vals\" list using the \"toVals\" method.","A list of properties can be turned into lists, sets or maps using various convenience methods.","Both the \"Vars\" and immutable \"Vals\" types can be used for functional programming.","Change listeners registered on a property list will be called when the list is sorted.","Just like a regular \"Var\" property you can register change listeners on \"Vars\".","Lists of properties can be sorted based on their natural order through the \"sort\" method.","Lists of properties can be sorted using a custom comparator through the \"sort\" method.","Map a \"Vals\" instance from one type of properties to another.","Map a \"Vars\" instance from one type of properties to another.","Multiple properties can be modelled through the \"Vars\" and \"Vals\" classes.","The \"Vars\" is a list of properties which can grow and shrink.","The \"makeDistinct\" method on a mutable list of properties modifies the list in-place.","The display action of a property or list of properties will not be called if they report \"canBeRemoved()\"","The listeners registered in property lists will be informed what type of modification occurred.","The properties of one property list can be added to another property list.","You can create a \"Vars\" list from a regular List of properties.","You can create the \"Vars\"/\"Vals\" property lists from property instances.","You can remove n leading or trailing entries from a property list."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":18,"totalFeatures":18,"passed":18,"successRate":1.0,"time":43},"title":"Lists of Properties","narrative":"Just like properties you can create lists of properties\n    and then bind them to UI components.\n    They are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    This specification shows how to use the various\n    methods exposed by the property lists classes, \n    namely \"Vals\" (immutable) and \"Vars\" (mutable)."},"sprouts.Property_Safety_Spec":{"executedFeatures":["\"Vals\", a list of properties, is immutable.","A \"Val\" instance is immutable.","A \"Var\" may only wrap null if it is created as nullable.","A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","The \"get\" method of a property throws an exception if the property is null.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null items."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":17},"title":"Property Null and Mutability Safety","narrative":"Properties are a core concept in Swing-Tree. They are in essence\n    just wrapper classes used to represent the state of your views.\n    Because of this, it is important that properties are\n    are nullable only when they need to be, and that they are\n    immutable only when they need to be."},"sprouts.MVVM_Unit_Test_Spec":{"executedFeatures":["The register button does nothing if the inputs are not all valid.","The registration view model will display feedback about invalid inputs."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":50},"title":"Writing Unit Tests for View Models","narrative":"Not only is Swing-Tree a framework for building UIs, it is also a framework for\n    building view models based on its built in property types. \n    This specification demonstrates how to write unit tests\n    for the example view models in the test suite."},"sprouts.Properties_List_Spec":{"executedFeatures":["A list of properties can be turned into an immutable \"Vals\" list using the \"toVals\" method.","A list of properties can be turned into lists, sets or maps using various convenience methods.","Both the \"Vars\" and immutable \"Vals\" types can be used for functional programming.","Change listeners registered on a property list will be called when the list is sorted.","Just like a regular \"Var\" property you can register change listeners on \"Vars\".","Lists of properties can be sorted based on their natural order through the \"sort\" method.","Lists of properties can be sorted using a custom comparator through the \"sort\" method.","Map a \"Vals\" instance from one type of properties to another.","Map a \"Vars\" instance from one type of properties to another.","Multiple properties can be modelled through the \"Vars\" and \"Vals\" classes.","The \"Vars\" is a list of properties which can grow and shrink.","The \"makeDistinct\" method on a mutable list of properties modifies the list in-place.","The display action of a property or list of properties will not be called if they report \"canBeRemoved()\"","The listeners registered in property lists will be informed what type of modification occurred.","The properties of one property list can be added to another property list.","You can create a \"Vars\" list from a regular List of properties.","You can create the \"Vars\"/\"Vals\" property lists from property instances.","You can remove n leading or trailing entries from a property list."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":18,"totalFeatures":18,"passed":18,"successRate":1.0,"time":66},"title":"Lists of Properties","narrative":"Just like properties you can create lists of properties\n    and then bind them to UI components.\n    They are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    This specification shows how to use the various\n    methods exposed by the property lists classes, \n    namely \"Vals\" (immutable) and \"Vars\" (mutable)."},"sprouts.Properties_Spec":{"executedFeatures":["A property can be converted to an Optional.","A property constructed using the \"of\" factory method, does not allow null items.","Changing the value of a property through the \"act\" method will also affect its views","Conveniently compare the item of a property with another item using \"is\", \"isOneOf\" or \"isNot\"","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onSetItem(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"withID(..)\" method produces a new property with all bindings inherited.","The UI uses the \"act(T)\" method to change the property state to avoid feedback looping.","The equality and hash code of a property are based on its value, type and id!","The string representation of a property will give you all the information you need.","There are 2 types of properties, an immutable property, and its mutable sub-type.","There are various kinds of convenience methods for creating live view of properties.","Use the \"viewAs\" method to create a dynamically updated view of a property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":17,"totalFeatures":17,"passed":17,"successRate":1.0,"time":30},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Swing-Tree library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"sprouts.Property_Safety_Spec":{"executedFeatures":["\"Vals\", a list of properties, is immutable.","A \"Val\" instance is immutable.","A \"Var\" may only wrap null if it is created as nullable.","A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","The \"get\" method of a property throws an exception if the property is null.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null items."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":19},"title":"Property Null and Mutability Safety","narrative":"Properties are a core concept in Swing-Tree. They are in essence\n    just wrapper classes used to represent the state of your views.\n    Because of this, it is important that properties are\n    are nullable only when they need to be, and that they are\n    immutable only when they need to be."},"sprouts.MVVM_Unit_Test_Spec":{"executedFeatures":["The register button does nothing if the inputs are not all valid.","The registration view model will display feedback about invalid inputs."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":52},"title":"Writing Unit Tests for View Models","narrative":"Not only is Sprouts a framework for building UIs, it is also a framework for\n    building view models based on its built in property types. \n    This specification demonstrates how to write unit tests\n    for the example view models in the test suite."},"sprouts.Properties_List_Spec":{"executedFeatures":["A list of properties can be turned into an immutable \"Vals\" list using the \"toVals\" method.","A list of properties can be turned into lists, sets or maps using various convenience methods.","Both the \"Vars\" and immutable \"Vals\" types can be used for functional programming.","Change listeners registered on a property list will be called when the list is sorted.","Just like a regular \"Var\" property you can register change listeners on \"Vars\".","Lists of properties can be sorted based on their natural order through the \"sort\" method.","Lists of properties can be sorted using a custom comparator through the \"sort\" method.","Map a \"Vals\" instance from one type of properties to another.","Map a \"Vars\" instance from one type of properties to another.","Multiple properties can be modelled through the \"Vars\" and \"Vals\" classes.","The \"Vars\" is a list of properties which can grow and shrink.","The \"makeDistinct\" method on a mutable list of properties modifies the list in-place.","The display action of a property or list of properties will not be called if they report \"canBeRemoved()\"","The listeners registered in property lists will be informed what type of modification occurred.","The properties of one property list can be added to another property list.","You can create a \"Vars\" list from a regular List of properties.","You can create the \"Vars\"/\"Vals\" property lists from property instances.","You can remove n leading or trailing entries from a property list."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":18,"totalFeatures":18,"passed":18,"successRate":1.0,"time":71},"title":"Lists of Properties","narrative":"Just like properties you can create lists of properties\n    and then bind them to UI components.\n    They are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    This specification shows how to use the various\n    methods exposed by the property lists classes, \n    namely \"Vals\" (immutable) and \"Vars\" (mutable)."},"sprouts.Properties_Spec":{"executedFeatures":["A property can be converted to an Optional.","A property constructed using the \"of\" factory method, does not allow null items.","Changing the value of a property through the \"act\" method will also affect its views","Conveniently compare the item of a property with another item using \"is\", \"isOneOf\" or \"isNot\"","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onSetItem(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"withID(..)\" method produces a new property with all bindings inherited.","The UI uses the \"act(T)\" method to change the property state to avoid feedback looping.","The equality and hash code of a property are based on its value, type and id!","The string representation of a property will give you all the information you need.","There are 2 types of properties, an immutable property, and its mutable sub-type.","There are various kinds of convenience methods for creating live view of properties.","Use the \"viewAs\" method to create a dynamically updated view of a property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":17,"totalFeatures":17,"passed":17,"successRate":1.0,"time":30},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Sprouts library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"sprouts.Property_Safety_Spec":{"executedFeatures":["\"Vals\", a list of properties, is immutable.","A \"Val\" instance is immutable.","A \"Var\" may only wrap null if it is created as nullable.","A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","The \"get\" method of a property throws an exception if the property is null.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null items."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":17},"title":"Property Null and Mutability Safety","narrative":"Properties are a core concept in Sprouts. They are in essence\n    just wrapper classes used to represent the state of your views.\n    Because of this, it is important that properties are\n    are nullable only when they need to be, and that they are\n    immutable only when they need to be."},"sprouts.MVVM_Unit_Test_Spec":{"executedFeatures":["The register button does nothing if the inputs are not all valid.","The registration view model will display feedback about invalid inputs."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":53},"title":"Writing Unit Tests for View Models","narrative":"Not only is Sprouts a framework for building UIs, it is also a framework for\n    building view models based on its built in property types. \n    This specification demonstrates how to write unit tests\n    for the example view models in the test suite."},"sprouts.Properties_List_Spec":{"executedFeatures":["A list of properties can be turned into an immutable \"Vals\" list using the \"toVals\" method.","A list of properties can be turned into lists, sets or maps using various convenience methods.","Both the \"Vars\" and immutable \"Vals\" types can be used for functional programming.","Change listeners registered on a property list will be called when the list is sorted.","Just like a regular \"Var\" property you can register change listeners on \"Vars\".","Lists of properties can be sorted based on their natural order through the \"sort\" method.","Lists of properties can be sorted using a custom comparator through the \"sort\" method.","Map a \"Vals\" instance from one type of properties to another.","Map a \"Vars\" instance from one type of properties to another.","Multiple properties can be modelled through the \"Vars\" and \"Vals\" classes.","The \"Vars\" is a list of properties which can grow and shrink.","The \"makeDistinct\" method on a mutable list of properties modifies the list in-place.","The display action of a property or list of properties will not be called if they report \"canBeRemoved()\"","The listeners registered in property lists will be informed what type of modification occurred.","The properties of one property list can be added to another property list.","You can create a \"Vars\" list from a regular List of properties.","You can create the \"Vars\"/\"Vals\" property lists from property instances.","You can remove n leading or trailing entries from a property list."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":18,"totalFeatures":18,"passed":18,"successRate":1.0,"time":64},"title":"Lists of Properties","narrative":"Just like properties you can create lists of properties\n    and then bind them to UI components.\n    They are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    This specification shows how to use the various\n    methods exposed by the property lists classes, \n    namely \"Vals\" (immutable) and \"Vars\" (mutable)."},"sprouts.Properties_Spec":{"executedFeatures":["A property can be converted to an Optional.","A property constructed using the \"of\" factory method, does not allow null items.","Changing the value of a property through the \"act\" method will also affect its views","Conveniently compare the item of a property with another item using \"is\", \"isOneOf\" or \"isNot\"","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onSetItem(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"withID(..)\" method produces a new property with all bindings inherited.","The UI uses the \"act(T)\" method to change the property state to avoid feedback looping.","The equality and hash code of a property are based on its value, type and id!","The string representation of a property will give you all the information you need.","There are 2 types of properties, an immutable property, and its mutable sub-type.","There are various kinds of convenience methods for creating live view of properties.","Use the \"viewAs\" method to create a dynamically updated view of a property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":17,"totalFeatures":17,"passed":17,"successRate":1.0,"time":30},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Sprouts library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"sprouts.Property_Safety_Spec":{"executedFeatures":["\"Vals\", a list of properties, is immutable.","A \"Val\" instance is immutable.","A \"Var\" may only wrap null if it is created as nullable.","A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","The \"get\" method of a property throws an exception if the property is null.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null items."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":18},"title":"Property Null and Mutability Safety","narrative":"Properties are a core concept in Sprouts. They are in essence\n    just wrapper classes used to represent the state of your views.\n    Because of this, it is important that properties are\n    are nullable only when they need to be, and that they are\n    mutable only when they need to be."},"sprouts.MVVM_Unit_Test_Spec":{"executedFeatures":["The register button does nothing if the inputs are not all valid.","The registration view model will display feedback about invalid inputs."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"totalFeatures":2,"passed":2,"successRate":1.0,"time":49},"title":"Writing Unit Tests for View Models","narrative":"Not only is Sprouts a framework for building UIs, it is also a framework for\n    building view models based on its built in property types. \n    This specification demonstrates how to write unit tests\n    for the example view models in the test suite."},"sprouts.Properties_List_Spec":{"executedFeatures":["A list of properties can be turned into an immutable \"Vals\" list using the \"toVals\" method.","A list of properties can be turned into lists, sets or maps using various convenience methods.","Both the \"Vars\" and immutable \"Vals\" types can be used for functional programming.","Change listeners registered on a property list will be called when the list is sorted.","Just like a regular \"Var\" property you can register change listeners on \"Vars\".","Lists of properties can be sorted based on their natural order through the \"sort\" method.","Lists of properties can be sorted using a custom comparator through the \"sort\" method.","Map a \"Vals\" instance from one type of properties to another.","Map a \"Vars\" instance from one type of properties to another.","Multiple properties can be modelled through the \"Vars\" and \"Vals\" classes.","The \"Vars\" is a list of properties which can grow and shrink.","The \"makeDistinct\" method on a mutable list of properties modifies the list in-place.","The display action of a property or list of properties will not be called if they report \"canBeRemoved()\"","The listeners registered in property lists will be informed what type of modification occurred.","The properties of one property list can be added to another property list.","You can create a \"Vars\" list from a regular List of properties.","You can create the \"Vars\"/\"Vals\" property lists from property instances.","You can remove n leading or trailing entries from a property list."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":18,"totalFeatures":18,"passed":18,"successRate":1.0,"time":77},"title":"Lists of Properties","narrative":"Just like properties you can create lists of properties\n    and then bind them to UI components.\n    They are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    This specification shows how to use the various\n    methods exposed by the property lists classes, \n    namely \"Vals\" (immutable) and \"Vars\" (mutable)."},"sprouts.Properties_Spec":{"executedFeatures":["A property can be converted to an Optional.","A property constructed using the \"of\" factory method, does not allow null items.","Changing the value of a property through the \"act\" method will also affect its views","Conveniently compare the item of a property with another item using \"is\", \"isOneOf\" or \"isNot\"","Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","Properties are simple wrappers around a value","Properties can be bound by subscribing to them using the \"onSetItem(..)\" method.","Properties not only have a value but also a type and id!","The \"get\" method will throw an exception if there is no element present.","The \"ifPresent\" method allows us to see if a property has a value or not.","The \"withID(..)\" method produces a new property with all bindings inherited.","The UI uses the \"act(T)\" method to change the property state to avoid feedback looping.","The equality and hash code of a property are based on its value, type and id!","The string representation of a property will give you all the information you need.","There are 2 types of properties, an immutable property, and its mutable sub-type.","There are various kinds of convenience methods for creating live view of properties.","Use the \"viewAs\" method to create a dynamically updated view of a property."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":17,"totalFeatures":17,"passed":17,"successRate":1.0,"time":30},"title":"Properties","narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Sprouts library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components."},"sprouts.Property_Safety_Spec":{"executedFeatures":["\"Vals\", a list of properties, is immutable.","A \"Val\" instance is immutable.","A \"Var\" may only wrap null if it is created as nullable.","A property can only wrap null if we specify a type class.","An empty property will throw an exception if you try to access its value.","The \"get\" method of a property throws an exception if the property is null.","The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null items."],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"totalFeatures":7,"passed":7,"successRate":1.0,"time":17},"title":"Property Null and Mutability Safety","narrative":"Properties are a core concept in Sprouts. They are in essence\n    just wrapper classes used to represent the state of your views.\n    Because of this, it is important that properties are\n    are nullable only when they need to be, and that they are\n    mutable only when they need to be."}}