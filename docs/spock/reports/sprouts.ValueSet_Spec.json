{
  "className":"sprouts.ValueSet_Spec",
  "title":"ValueSet - a Data Oriented Set",
  "narrative":"ValueSet is a fundamental building block in sprouts' data-oriented programming model.\n    It represents an immutable collection of unique elements, providing an API focused on\n    deriving new sets from existing ones rather than mutating state. Unlike traditional\n    Java sets, all operations return new `ValueSet` instances, making it ideal for\n    functional-style programming and safe concurrent usage.",
  "subjects":["sprouts.ValueSet"],
  "statistics":{
    "runs":"39",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Use `ValueSet.of(Class, Iterable)` to create a value set from an iterable.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var iterable = [\"a\", \"b\", \"c\", \"d\", \"e\"] as Iterable<String>"]},

        {"kind":"when","text":"","code":["var valueSet = ValueSet.of(String, iterable)"]},

        {"kind":"then","text":"","code":["valueSet.size() == 5","valueSet.type() == String","valueSet.toSet() == [\"a\", \"b\", \"c\", \"d\", \"e\"] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"An empty ValueSet is created by specifying the element type",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A `ValueSet` needs to be created with a type to allow for better\n            type safety during runtime as well as improved performance\n            due to primitive specialization.\n            A `ValueSet` based on the `Integer` class for example, will\n            internally use a primitive `int[]` array to store the values.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var emptySet = ValueSet.of(String)"]},

        {"kind":"expect","text":"","code":["emptySet.isEmpty()","emptySet.type() == String","!emptySet.isSorted()"]},

        {"kind":"when","text":"","code":["var emptySet2 = ValueSet.of(Integer)"]},

        {"kind":"then","text":"","code":["emptySet2.isEmpty()","emptySet2.type() == Integer","!emptySet2.isSorted()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `ValueSet` maintains invariance with Java Set across operations [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(String)","var referenceSet = new HashSet<>()","var operationsApplier = { currentSet ->","    operations.each { op, element ->","        switch (op) {","            case Operation.ADD:","                currentSet = currentSet.add(element)","                referenceSet.add(element)","                break","            case Operation.REMOVE:","                currentSet = currentSet.remove(element)","                referenceSet.remove(element)","                break","            case Operation.CLEAR:","                currentSet = currentSet.clear()","                referenceSet.clear()","                break","        }","    }","    return currentSet","}"]},

        {"kind":"when","text":"Apply operations first time","code":["valueSet = operationsApplier(valueSet)"]},

        {"kind":"then","text":"Immediate invariance","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet"]},

        {"kind":"when","text":"Apply operations multiple times","code":["5.times { valueSet = operationsApplier(valueSet) }"]},

        {"kind":"then","text":"Consistent state","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet"]},

        {"kind":"when","text":"We use the stream API to map both the value set and the JDK based reference set.","code":["var mappedValueSet = valueSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOf(String.class))","var mappedSet = referenceSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and mapped set are equal.","code":["mappedValueSet.toSet() == mappedSet"]},

        {"kind":"when","text":"We use the parallel stream API to map both the value set and the reference set.","code":["var mappedValueSetParallel = valueSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOf(String.class))","var mappedSetParallel = referenceSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and JDK set are equal in terms of their contents.","code":["mappedValueSetParallel.toSet() == mappedSetParallel"]},

        {"kind":"where","text":"","code":{"operations":["new Tuple2(Operation.ADD, \"apple\"),\n                new Tuple2(Operation.ADD, \"banana\"),\n                new Tuple2(Operation.REMOVE, \"apple\")\n        ]","(0..100).collect {\n            new Tuple2(it % 2 == 0 ? Operation.ADD : Operation.REMOVE,\n                    \"item-\"+(it % 50))\n        }","(0..1000).collect {\n            new Tuple2(new Random(it).nextBoolean() ? Operation.ADD : Operation.REMOVE,\n                    \"element-\"+Math.abs(new Random(it).nextInt() % 500))\n        }","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 50, which\n                means 50 add operations, then 50 remove operations then 50 add... etc.\n                There is a total of 160 possible values!\n             */\n            var hash = Math.abs((it*1997) % 160)\n            var operation = ((int)(it/50)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 100, which\n                means 100 add operations, then 100 remove operations then 100 add... etc.\n                There is a total of 190 possible values!\n             */\n            var hash = Math.abs((it*1997) % 190)\n            var operation = ((int)(it/100)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `ValueSet` maintains invariance with Java Set across operations [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(String)","var referenceSet = new HashSet<>()","var operationsApplier = { currentSet ->","    operations.each { op, element ->","        switch (op) {","            case Operation.ADD:","                currentSet = currentSet.add(element)","                referenceSet.add(element)","                break","            case Operation.REMOVE:","                currentSet = currentSet.remove(element)","                referenceSet.remove(element)","                break","            case Operation.CLEAR:","                currentSet = currentSet.clear()","                referenceSet.clear()","                break","        }","    }","    return currentSet","}"]},

        {"kind":"when","text":"Apply operations first time","code":["valueSet = operationsApplier(valueSet)"]},

        {"kind":"then","text":"Immediate invariance","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet"]},

        {"kind":"when","text":"Apply operations multiple times","code":["5.times { valueSet = operationsApplier(valueSet) }"]},

        {"kind":"then","text":"Consistent state","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet"]},

        {"kind":"when","text":"We use the stream API to map both the value set and the JDK based reference set.","code":["var mappedValueSet = valueSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOf(String.class))","var mappedSet = referenceSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and mapped set are equal.","code":["mappedValueSet.toSet() == mappedSet"]},

        {"kind":"when","text":"We use the parallel stream API to map both the value set and the reference set.","code":["var mappedValueSetParallel = valueSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOf(String.class))","var mappedSetParallel = referenceSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and JDK set are equal in terms of their contents.","code":["mappedValueSetParallel.toSet() == mappedSetParallel"]},

        {"kind":"where","text":"","code":{"operations":["new Tuple2(Operation.ADD, \"apple\"),\n                new Tuple2(Operation.ADD, \"banana\"),\n                new Tuple2(Operation.REMOVE, \"apple\")\n        ]","(0..100).collect {\n            new Tuple2(it % 2 == 0 ? Operation.ADD : Operation.REMOVE,\n                    \"item-\"+(it % 50))\n        }","(0..1000).collect {\n            new Tuple2(new Random(it).nextBoolean() ? Operation.ADD : Operation.REMOVE,\n                    \"element-\"+Math.abs(new Random(it).nextInt() % 500))\n        }","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 50, which\n                means 50 add operations, then 50 remove operations then 50 add... etc.\n                There is a total of 160 possible values!\n             */\n            var hash = Math.abs((it*1997) % 160)\n            var operation = ((int)(it/50)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 100, which\n                means 100 add operations, then 100 remove operations then 100 add... etc.\n                There is a total of 190 possible values!\n             */\n            var hash = Math.abs((it*1997) % 190)\n            var operation = ((int)(it/100)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `ValueSet` maintains invariance with Java Set across operations [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(String)","var referenceSet = new HashSet<>()","var operationsApplier = { currentSet ->","    operations.each { op, element ->","        switch (op) {","            case Operation.ADD:","                currentSet = currentSet.add(element)","                referenceSet.add(element)","                break","            case Operation.REMOVE:","                currentSet = currentSet.remove(element)","                referenceSet.remove(element)","                break","            case Operation.CLEAR:","                currentSet = currentSet.clear()","                referenceSet.clear()","                break","        }","    }","    return currentSet","}"]},

        {"kind":"when","text":"Apply operations first time","code":["valueSet = operationsApplier(valueSet)"]},

        {"kind":"then","text":"Immediate invariance","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet"]},

        {"kind":"when","text":"Apply operations multiple times","code":["5.times { valueSet = operationsApplier(valueSet) }"]},

        {"kind":"then","text":"Consistent state","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet"]},

        {"kind":"when","text":"We use the stream API to map both the value set and the JDK based reference set.","code":["var mappedValueSet = valueSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOf(String.class))","var mappedSet = referenceSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and mapped set are equal.","code":["mappedValueSet.toSet() == mappedSet"]},

        {"kind":"when","text":"We use the parallel stream API to map both the value set and the reference set.","code":["var mappedValueSetParallel = valueSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOf(String.class))","var mappedSetParallel = referenceSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and JDK set are equal in terms of their contents.","code":["mappedValueSetParallel.toSet() == mappedSetParallel"]},

        {"kind":"where","text":"","code":{"operations":["new Tuple2(Operation.ADD, \"apple\"),\n                new Tuple2(Operation.ADD, \"banana\"),\n                new Tuple2(Operation.REMOVE, \"apple\")\n        ]","(0..100).collect {\n            new Tuple2(it % 2 == 0 ? Operation.ADD : Operation.REMOVE,\n                    \"item-\"+(it % 50))\n        }","(0..1000).collect {\n            new Tuple2(new Random(it).nextBoolean() ? Operation.ADD : Operation.REMOVE,\n                    \"element-\"+Math.abs(new Random(it).nextInt() % 500))\n        }","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 50, which\n                means 50 add operations, then 50 remove operations then 50 add... etc.\n                There is a total of 160 possible values!\n             */\n            var hash = Math.abs((it*1997) % 160)\n            var operation = ((int)(it/50)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 100, which\n                means 100 add operations, then 100 remove operations then 100 add... etc.\n                There is a total of 190 possible values!\n             */\n            var hash = Math.abs((it*1997) % 190)\n            var operation = ((int)(it/100)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `ValueSet` maintains invariance with Java Set across operations [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(String)","var referenceSet = new HashSet<>()","var operationsApplier = { currentSet ->","    operations.each { op, element ->","        switch (op) {","            case Operation.ADD:","                currentSet = currentSet.add(element)","                referenceSet.add(element)","                break","            case Operation.REMOVE:","                currentSet = currentSet.remove(element)","                referenceSet.remove(element)","                break","            case Operation.CLEAR:","                currentSet = currentSet.clear()","                referenceSet.clear()","                break","        }","    }","    return currentSet","}"]},

        {"kind":"when","text":"Apply operations first time","code":["valueSet = operationsApplier(valueSet)"]},

        {"kind":"then","text":"Immediate invariance","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet"]},

        {"kind":"when","text":"Apply operations multiple times","code":["5.times { valueSet = operationsApplier(valueSet) }"]},

        {"kind":"then","text":"Consistent state","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet"]},

        {"kind":"when","text":"We use the stream API to map both the value set and the JDK based reference set.","code":["var mappedValueSet = valueSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOf(String.class))","var mappedSet = referenceSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and mapped set are equal.","code":["mappedValueSet.toSet() == mappedSet"]},

        {"kind":"when","text":"We use the parallel stream API to map both the value set and the reference set.","code":["var mappedValueSetParallel = valueSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOf(String.class))","var mappedSetParallel = referenceSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and JDK set are equal in terms of their contents.","code":["mappedValueSetParallel.toSet() == mappedSetParallel"]},

        {"kind":"where","text":"","code":{"operations":["new Tuple2(Operation.ADD, \"apple\"),\n                new Tuple2(Operation.ADD, \"banana\"),\n                new Tuple2(Operation.REMOVE, \"apple\")\n        ]","(0..100).collect {\n            new Tuple2(it % 2 == 0 ? Operation.ADD : Operation.REMOVE,\n                    \"item-\"+(it % 50))\n        }","(0..1000).collect {\n            new Tuple2(new Random(it).nextBoolean() ? Operation.ADD : Operation.REMOVE,\n                    \"element-\"+Math.abs(new Random(it).nextInt() % 500))\n        }","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 50, which\n                means 50 add operations, then 50 remove operations then 50 add... etc.\n                There is a total of 160 possible values!\n             */\n            var hash = Math.abs((it*1997) % 160)\n            var operation = ((int)(it/50)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 100, which\n                means 100 add operations, then 100 remove operations then 100 add... etc.\n                There is a total of 190 possible values!\n             */\n            var hash = Math.abs((it*1997) % 190)\n            var operation = ((int)(it/100)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `ValueSet` maintains invariance with Java Set across operations [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(String)","var referenceSet = new HashSet<>()","var operationsApplier = { currentSet ->","    operations.each { op, element ->","        switch (op) {","            case Operation.ADD:","                currentSet = currentSet.add(element)","                referenceSet.add(element)","                break","            case Operation.REMOVE:","                currentSet = currentSet.remove(element)","                referenceSet.remove(element)","                break","            case Operation.CLEAR:","                currentSet = currentSet.clear()","                referenceSet.clear()","                break","        }","    }","    return currentSet","}"]},

        {"kind":"when","text":"Apply operations first time","code":["valueSet = operationsApplier(valueSet)"]},

        {"kind":"then","text":"Immediate invariance","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet"]},

        {"kind":"when","text":"Apply operations multiple times","code":["5.times { valueSet = operationsApplier(valueSet) }"]},

        {"kind":"then","text":"Consistent state","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet"]},

        {"kind":"when","text":"We use the stream API to map both the value set and the JDK based reference set.","code":["var mappedValueSet = valueSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOf(String.class))","var mappedSet = referenceSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and mapped set are equal.","code":["mappedValueSet.toSet() == mappedSet"]},

        {"kind":"when","text":"We use the parallel stream API to map both the value set and the reference set.","code":["var mappedValueSetParallel = valueSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOf(String.class))","var mappedSetParallel = referenceSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and JDK set are equal in terms of their contents.","code":["mappedValueSetParallel.toSet() == mappedSetParallel"]},

        {"kind":"where","text":"","code":{"operations":["new Tuple2(Operation.ADD, \"apple\"),\n                new Tuple2(Operation.ADD, \"banana\"),\n                new Tuple2(Operation.REMOVE, \"apple\")\n        ]","(0..100).collect {\n            new Tuple2(it % 2 == 0 ? Operation.ADD : Operation.REMOVE,\n                    \"item-\"+(it % 50))\n        }","(0..1000).collect {\n            new Tuple2(new Random(it).nextBoolean() ? Operation.ADD : Operation.REMOVE,\n                    \"element-\"+Math.abs(new Random(it).nextInt() % 500))\n        }","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 50, which\n                means 50 add operations, then 50 remove operations then 50 add... etc.\n                There is a total of 160 possible values!\n             */\n            var hash = Math.abs((it*1997) % 160)\n            var operation = ((int)(it/50)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 100, which\n                means 100 add operations, then 100 remove operations then 100 add... etc.\n                There is a total of 190 possible values!\n             */\n            var hash = Math.abs((it*1997) % 190)\n            var operation = ((int)(it/100)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Set operations maintain mathematical set properties",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.of(Integer).add(1).add(2).add(3)"]},

        {"kind":"when","text":"Union with another set","code":["var union = initial.addAll(ValueSet.of(3,4,5))"]},

        {"kind":"then","text":"","code":["union.toSet() == [1,2,3,4,5] as Set"]},

        {"kind":"when","text":"Intersection","code":["var intersection = initial.retainAll([2,3,4] as Set)"]},

        {"kind":"then","text":"","code":["intersection.toSet() == [2,3] as Set"]},

        {"kind":"when","text":"Difference","code":["var difference = initial.removeAll([3] as Set)"]},

        {"kind":"then","text":"","code":["difference.toSet() == [1,2] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Equality and hash code follow set semantics",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var set1 = ValueSet.of(\"a\", \"b\", \"c\")","var set2 = ValueSet.of(\"c\", \"b\", \"a\")","var set3 = set1.add(\"d\")"]},

        {"kind":"expect","text":"","code":["set1 == set2","set1.hashCode() == set2.hashCode()","set1 != set3"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Bulk operations handle large datasets efficiently",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size = 10_000","var elements = (1..size).collect { \"item-\"+it }","var valueSet = ValueSet.of(String).addAll(elements)"]},

        {"kind":"expect","text":"","code":["valueSet.size() == size","elements.every { valueSet.contains(it) }"]},

        {"kind":"when","text":"","code":["var removed = valueSet.removeAll(elements[0..5000])"]},

        {"kind":"then","text":"","code":["removed.size() == size - 5001"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Immutable characteristics are preserved",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var original = ValueSet.of(\"a\", \"b\")","var modified = original.add(\"c\")"]},

        {"kind":"expect","text":"","code":["original.size() == 2","modified.size() == 3","!original.contains(\"c\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `clear` operation works on a non-empty value set",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var set = ValueSet.of(1,2,3)"]},

        {"kind":"expect","text":"Contains checks","code":["set.isNotEmpty() && set.size() == 3","set.contains(2) && !set.contains(4)"]},

        {"kind":"when","text":"We apply the clear operation.","code":["var cleared = set.clear()"]},

        {"kind":"then","text":"","code":["cleared.isEmpty()","cleared.type() == Integer"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"String representation reflects contents",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var smallSet = ValueSet.of(\"a\", \"b\", \"c\")","var largeSet = ValueSet.of(Integer).addAll(1..35)"]},

        {"kind":"expect","text":"","code":["smallSet.toString() == 'ValueSet<String>[\"b\", \"c\", \"a\"]'","largeSet.toString().contains(\"... 27 items left]\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Edge cases are handled gracefully",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Adding null element","code":["ValueSet.of(String).add(null)"]},

        {"kind":"then","text":"","code":["thrown(NullPointerException)"]},

        {"kind":"when","text":"Null element type","code":["ValueSet.of(null)"]},

        {"kind":"then","text":"","code":["thrown(NullPointerException)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Stream integration works properly",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var elements = [\"apple\", \"banana\", \"cherry\"]","var stream = elements.stream()"]},

        {"kind":"when","text":"","code":["var collectedSet = stream.collect(ValueSet.collectorOf(String))"]},

        {"kind":"then","text":"","code":["collectedSet.toSet() == elements as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Set operations with Java collections",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(\"a\", \"b\", \"c\")","var javaSet = [\"b\", \"c\", \"d\"] as Set"]},

        {"kind":"when","text":"Union with Java set","code":["var union = valueSet.addAll(javaSet)"]},

        {"kind":"then","text":"","code":["union.toSet() == [\"a\", \"b\", \"c\", \"d\"] as Set"]},

        {"kind":"when","text":"Intersection with Java set","code":["var intersection = valueSet.retainAll(javaSet)"]},

        {"kind":"then","text":"","code":["intersection.toSet() == [\"b\", \"c\"] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Iterator behavior conforms to set semantics",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var set = ValueSet.of(1,2,3)","var iterated = []"]},

        {"kind":"when","text":"","code":["for ( var element : set ) {","    iterated << element","}"]},

        {"kind":"then","text":"","code":["iterated.size() == 3","iterated as Set == [1,2,3] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Empty set special cases",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var empty = ValueSet.of(String).clear()"]},

        {"kind":"expect","text":"","code":["empty.isEmpty()","empty.type() == String","empty.add(\"test\").size() == 1"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Duplicate additions have no effect",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var set = ValueSet.of(\"a\").add(\"a\").add(\"a\")"]},

        {"kind":"expect","text":"","code":["set.size() == 1"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"addAll supports various collection types",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.of(\"a\")"]},

        {"kind":"expect","text":"Elements from different collection types are added correctly","code":["initial.addAll([\"b\", \"c\"] as List).toSet() == [\"a\", \"b\", \"c\"] as Set","initial.addAll([\"b\", \"c\"] as Set).toSet() == [\"a\", \"b\", \"c\"] as Set","initial.addAll(Tuple.of(\"b\", \"c\")).toSet() == [\"a\", \"b\", \"c\"] as Set","initial.addAll([\"b\", \"c\"] as String[]).toSet() == [\"a\", \"b\", \"c\"] as Set","initial.addAll(Stream.of(\"b\", \"c\")).toSet() == [\"a\", \"b\", \"c\"] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"removeAll handles different input collection types",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.of(\"a\", \"b\", \"c\", \"d\")"]},

        {"kind":"expect","text":"Elements are removed regardless of input collection type","code":["initial.removeAll([\"a\", \"b\"] as List).toSet() == [\"c\", \"d\"] as Set","initial.removeAll([\"c\"] as Set).toSet() == [\"a\", \"b\", \"d\"] as Set","initial.removeAll(Tuple.of(\"d\", \"e\")).toSet() == [\"a\", \"b\", \"c\"] as Set","initial.removeAll([\"b\", \"c\"] as String[]).toSet() == [\"a\", \"d\"] as Set","initial.removeAll(Stream.of(\"a\", \"d\")).toSet() == [\"b\", \"c\"] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"retainAll works with diverse collection sources",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.of(\"a\", \"b\", \"c\", \"d\")"]},

        {"kind":"expect","text":"Only elements present in both collections are retained","code":["initial.retainAll([\"b\", \"c\"] as List).toSet() == [\"b\", \"c\"] as Set","initial.retainAll([\"a\", \"d\"] as Set).toSet() == [\"a\", \"d\"] as Set","initial.retainAll(Tuple.of(\"c\", \"e\")).toSet() == [\"c\"] as Set","initial.retainAll([\"d\"] as String[]).toSet() == [\"d\"] as Set","initial.retainAll(Stream.of(\"a\", \"b\")).toSet() == [\"a\", \"b\"] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The various `containsAll(..)` methods accurately check membership across collection types.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(\"a\", \"b\", \"c\")"]},

        {"kind":"expect","text":"Membership checks work with all compatible collection types","code":["valueSet.containsAll([\"a\", \"b\"] as List)","valueSet.containsAll([\"b\", \"c\"] as Set)","valueSet.containsAll([\"b\", \"c\"] as Iterable<String>)","valueSet.containsAll([\"a\", \"b\", \"c\"] as String[])","valueSet.containsAll([\"a\", \"b\", \"c\"].stream())","valueSet.containsAll(Stream.of(\"b\", \"c\"))","valueSet.containsAll(Tuple.of(\"a\", \"c\"))","!valueSet.containsAll([\"a\", \"d\"] as List)","!valueSet.containsAll([\"a\", \"d\"] as Set)","!valueSet.containsAll([\"a\", \"d\"] as Iterable<String>)","!valueSet.containsAll([\"a\", \"d\"] as String[])","!valueSet.containsAll([\"a\", \"d\"].stream())","!valueSet.containsAll(Tuple.of(\"a\", \"d\"))","valueSet.containsAll([] as Set) // Empty collection always returns true","valueSet.containsAll(ValueSet.of(\"a\", \"c\"))","!valueSet.containsAll(ValueSet.of(\"b\", \"c\", \"d\"))"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"operations with empty collections have no effect or clear as expected",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.of(\"a\", \"b\")"]},

        {"kind":"expect","text":"Empty inputs leave set unchanged or clear appropriately","code":["initial.addAll([] as Set) == initial","initial.removeAll([] as Set) == initial","initial.retainAll([\"a\", \"b\"] as Set) == initial"]},

        {"kind":"when","text":"Retaining nothing clears the set","code":["var cleared = initial.retainAll([] as Set)"]},

        {"kind":"then","text":"","code":["cleared.isEmpty()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"bulk operations ignore duplicate elements in input",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.of(\"a\")"]},

        {"kind":"expect","text":"Duplicates in input collections have no effect","code":["initial.addAll([\"a\", \"a\", \"b\"] as List).toSet() == [\"a\", \"b\"] as Set","initial.removeAll([\"a\", \"a\"] as List).isEmpty()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"interoperates with Tuple collections",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var tuple = Tuple.of(\"x\", \"y\", \"z\")","var valueSet = ValueSet.of(String).addAll(tuple)"]},

        {"kind":"expect","text":"Full interoperability with Tuple collections","code":["valueSet.containsAll(tuple)","valueSet.removeAll(tuple).isEmpty()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"collector works with different stream sources",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Collecting from various stream sources","code":["var fromList = [\"a\", \"b\"].stream().collect(ValueSet.collectorOf(String))","var fromSet = ([\"c\", \"d\"] as Set).stream().collect(ValueSet.collectorOf(String))","var fromArray = Arrays.stream([\"e\", \"f\"] as String[]).collect(ValueSet.collectorOf(String))","var fromTuple = Tuple.of(\"g\", \"h\").stream().collect(ValueSet.collectorOf(String))"]},

        {"kind":"then","text":"All collected sets match source contents","code":["fromList.toSet() == [\"a\", \"b\"] as Set","fromSet.toSet() == [\"c\", \"d\"] as Set","fromArray.toSet() == [\"e\", \"f\"] as Set","fromTuple.toSet() == [\"g\", \"h\"] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"no-op operations return the same instance",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.of(\"a\", \"b\", \"c\", \"d\")","var sameElements = [\"a\", \"b\", \"c\", \"d\"] as Set<String>","var empty = Collections.emptySet() as Set<String>"]},

        {"kind":"expect","text":"Using no-op operations on the initial set does not return a new instance.","code":["initial.addAll(empty).is(initial)","initial.addAll(sameElements).is(initial)","initial.removeAll(empty).is(initial)","initial.retainAll(sameElements).is(initial)"]},

        {"kind":"and","text":"Adding existing elements does not change the set.","code":["initial.add(\"a\").is(initial)","initial.add(\"b\").is(initial)","initial.add(\"c\").is(initial)","initial.add(\"d\").is(initial)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `ValueSet.classTyped(Class)` to created a typed class pointer to `ValueSet`.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var typed = ValueSet.classTyped(String)"]},

        {"kind":"expect","text":"","code":["typed == ValueSet.class"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A value set can directly be created from a tuple.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var tuple = Tuple.of(\"c\", \"a\", \"b\", \"a\", \"c\", \"b\", \"c\", \"d\", \"e\", \"b\")"]},

        {"kind":"when","text":"","code":["var valueSet = ValueSet.of(tuple)"]},

        {"kind":"then","text":"","code":["valueSet.size() == 5","valueSet.toSet() == [\"a\", \"b\", \"c\", \"d\", \"e\"] as Set","valueSet.containsAll(tuple)","valueSet.type() == String"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the `sort(Comparator)` method to create a sorted value set.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(\"c\", \"a\", \"b\", \"a\", \"c\", \"b\", \"c\", \"d\", \"e\", \"b\")"]},

        {"kind":"when","text":"","code":["var sorted = valueSet.sort(Comparator.naturalOrder())"]},

        {"kind":"then","text":"","code":["sorted.size() == 5","sorted.type() == String","sorted.toList() == [\"a\", \"b\", \"c\", \"d\", \"e\"]"]},

        {"kind":"when","text":"We sort the value set in reverse order.","code":["var sortedReverse = valueSet.sort(Comparator.reverseOrder())"]},

        {"kind":"then","text":"","code":["sortedReverse.size() == 5","sortedReverse.type() == String","sortedReverse.toList() == [\"e\", \"d\", \"c\", \"b\", \"a\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `ValueSet` can handle all kinds of item types. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(Tuple.of(type, items))","var set = items as Set"]},

        {"kind":"expect","text":"","code":["valueSet.type() == type"]},

        {"kind":"when","text":"","code":["var tupleResult = valueSet.removeAll(valueSet.toTuple().sort().slice(1, 5))"]},

        {"kind":"and","text":"","code":["var setResult = set - set.toList().toSorted().subList(1, 5)"]},

        {"kind":"then","text":"","code":["tupleResult.toSet() == setResult"]},

        {"kind":"where","text":"","code":{"type":["Integer","Byte","Short","Long","Float","Double","Character","String"],"items":["[0,5,-4,-3,5,1,0,4,8,41,2,6,-3,9,4,5] as int[]","[2,8,1,7,5,1,3,7,8,41,2,7,3,0,-4,8,1] as byte[]","[4,5,7,93,5,1,2,77,8,41,2,6,63,9,4,7] as short[]","[6,6,-8,23,5,1,-60,6,-3,41,6,6,3,9,4] as long[]","[0.3f,5f,9.3f,6f,5.2f,1.67f,7f,3f,0f] as float[]","[6.4,-5.2,1d,0d,5.2d,1.11d,5d,83d,3d] as double[]","[0,4,4,7,5,1,8,6,3,41,2,6,3,9,4,84,5] as char[]","[\"watch\",\"dominion\",\"movie\",\"now\",\"!\"] as String[]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `ValueSet` can handle all kinds of item types. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(Tuple.of(type, items))","var set = items as Set"]},

        {"kind":"expect","text":"","code":["valueSet.type() == type"]},

        {"kind":"when","text":"","code":["var tupleResult = valueSet.removeAll(valueSet.toTuple().sort().slice(1, 5))"]},

        {"kind":"and","text":"","code":["var setResult = set - set.toList().toSorted().subList(1, 5)"]},

        {"kind":"then","text":"","code":["tupleResult.toSet() == setResult"]},

        {"kind":"where","text":"","code":{"type":["Integer","Byte","Short","Long","Float","Double","Character","String"],"items":["[0,5,-4,-3,5,1,0,4,8,41,2,6,-3,9,4,5] as int[]","[2,8,1,7,5,1,3,7,8,41,2,7,3,0,-4,8,1] as byte[]","[4,5,7,93,5,1,2,77,8,41,2,6,63,9,4,7] as short[]","[6,6,-8,23,5,1,-60,6,-3,41,6,6,3,9,4] as long[]","[0.3f,5f,9.3f,6f,5.2f,1.67f,7f,3f,0f] as float[]","[6.4,-5.2,1d,0d,5.2d,1.11d,5d,83d,3d] as double[]","[0,4,4,7,5,1,8,6,3,41,2,6,3,9,4,84,5] as char[]","[\"watch\",\"dominion\",\"movie\",\"now\",\"!\"] as String[]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `ValueSet` can handle all kinds of item types. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(Tuple.of(type, items))","var set = items as Set"]},

        {"kind":"expect","text":"","code":["valueSet.type() == type"]},

        {"kind":"when","text":"","code":["var tupleResult = valueSet.removeAll(valueSet.toTuple().sort().slice(1, 5))"]},

        {"kind":"and","text":"","code":["var setResult = set - set.toList().toSorted().subList(1, 5)"]},

        {"kind":"then","text":"","code":["tupleResult.toSet() == setResult"]},

        {"kind":"where","text":"","code":{"type":["Integer","Byte","Short","Long","Float","Double","Character","String"],"items":["[0,5,-4,-3,5,1,0,4,8,41,2,6,-3,9,4,5] as int[]","[2,8,1,7,5,1,3,7,8,41,2,7,3,0,-4,8,1] as byte[]","[4,5,7,93,5,1,2,77,8,41,2,6,63,9,4,7] as short[]","[6,6,-8,23,5,1,-60,6,-3,41,6,6,3,9,4] as long[]","[0.3f,5f,9.3f,6f,5.2f,1.67f,7f,3f,0f] as float[]","[6.4,-5.2,1d,0d,5.2d,1.11d,5d,83d,3d] as double[]","[0,4,4,7,5,1,8,6,3,41,2,6,3,9,4,84,5] as char[]","[\"watch\",\"dominion\",\"movie\",\"now\",\"!\"] as String[]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `ValueSet` can handle all kinds of item types. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(Tuple.of(type, items))","var set = items as Set"]},

        {"kind":"expect","text":"","code":["valueSet.type() == type"]},

        {"kind":"when","text":"","code":["var tupleResult = valueSet.removeAll(valueSet.toTuple().sort().slice(1, 5))"]},

        {"kind":"and","text":"","code":["var setResult = set - set.toList().toSorted().subList(1, 5)"]},

        {"kind":"then","text":"","code":["tupleResult.toSet() == setResult"]},

        {"kind":"where","text":"","code":{"type":["Integer","Byte","Short","Long","Float","Double","Character","String"],"items":["[0,5,-4,-3,5,1,0,4,8,41,2,6,-3,9,4,5] as int[]","[2,8,1,7,5,1,3,7,8,41,2,7,3,0,-4,8,1] as byte[]","[4,5,7,93,5,1,2,77,8,41,2,6,63,9,4,7] as short[]","[6,6,-8,23,5,1,-60,6,-3,41,6,6,3,9,4] as long[]","[0.3f,5f,9.3f,6f,5.2f,1.67f,7f,3f,0f] as float[]","[6.4,-5.2,1d,0d,5.2d,1.11d,5d,83d,3d] as double[]","[0,4,4,7,5,1,8,6,3,41,2,6,3,9,4,84,5] as char[]","[\"watch\",\"dominion\",\"movie\",\"now\",\"!\"] as String[]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `ValueSet` can handle all kinds of item types. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(Tuple.of(type, items))","var set = items as Set"]},

        {"kind":"expect","text":"","code":["valueSet.type() == type"]},

        {"kind":"when","text":"","code":["var tupleResult = valueSet.removeAll(valueSet.toTuple().sort().slice(1, 5))"]},

        {"kind":"and","text":"","code":["var setResult = set - set.toList().toSorted().subList(1, 5)"]},

        {"kind":"then","text":"","code":["tupleResult.toSet() == setResult"]},

        {"kind":"where","text":"","code":{"type":["Integer","Byte","Short","Long","Float","Double","Character","String"],"items":["[0,5,-4,-3,5,1,0,4,8,41,2,6,-3,9,4,5] as int[]","[2,8,1,7,5,1,3,7,8,41,2,7,3,0,-4,8,1] as byte[]","[4,5,7,93,5,1,2,77,8,41,2,6,63,9,4,7] as short[]","[6,6,-8,23,5,1,-60,6,-3,41,6,6,3,9,4] as long[]","[0.3f,5f,9.3f,6f,5.2f,1.67f,7f,3f,0f] as float[]","[6.4,-5.2,1d,0d,5.2d,1.11d,5d,83d,3d] as double[]","[0,4,4,7,5,1,8,6,3,41,2,6,3,9,4,84,5] as char[]","[\"watch\",\"dominion\",\"movie\",\"now\",\"!\"] as String[]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `ValueSet` can handle all kinds of item types. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(Tuple.of(type, items))","var set = items as Set"]},

        {"kind":"expect","text":"","code":["valueSet.type() == type"]},

        {"kind":"when","text":"","code":["var tupleResult = valueSet.removeAll(valueSet.toTuple().sort().slice(1, 5))"]},

        {"kind":"and","text":"","code":["var setResult = set - set.toList().toSorted().subList(1, 5)"]},

        {"kind":"then","text":"","code":["tupleResult.toSet() == setResult"]},

        {"kind":"where","text":"","code":{"type":["Integer","Byte","Short","Long","Float","Double","Character","String"],"items":["[0,5,-4,-3,5,1,0,4,8,41,2,6,-3,9,4,5] as int[]","[2,8,1,7,5,1,3,7,8,41,2,7,3,0,-4,8,1] as byte[]","[4,5,7,93,5,1,2,77,8,41,2,6,63,9,4,7] as short[]","[6,6,-8,23,5,1,-60,6,-3,41,6,6,3,9,4] as long[]","[0.3f,5f,9.3f,6f,5.2f,1.67f,7f,3f,0f] as float[]","[6.4,-5.2,1d,0d,5.2d,1.11d,5d,83d,3d] as double[]","[0,4,4,7,5,1,8,6,3,41,2,6,3,9,4,84,5] as char[]","[\"watch\",\"dominion\",\"movie\",\"now\",\"!\"] as String[]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `ValueSet` can handle all kinds of item types. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(Tuple.of(type, items))","var set = items as Set"]},

        {"kind":"expect","text":"","code":["valueSet.type() == type"]},

        {"kind":"when","text":"","code":["var tupleResult = valueSet.removeAll(valueSet.toTuple().sort().slice(1, 5))"]},

        {"kind":"and","text":"","code":["var setResult = set - set.toList().toSorted().subList(1, 5)"]},

        {"kind":"then","text":"","code":["tupleResult.toSet() == setResult"]},

        {"kind":"where","text":"","code":{"type":["Integer","Byte","Short","Long","Float","Double","Character","String"],"items":["[0,5,-4,-3,5,1,0,4,8,41,2,6,-3,9,4,5] as int[]","[2,8,1,7,5,1,3,7,8,41,2,7,3,0,-4,8,1] as byte[]","[4,5,7,93,5,1,2,77,8,41,2,6,63,9,4,7] as short[]","[6,6,-8,23,5,1,-60,6,-3,41,6,6,3,9,4] as long[]","[0.3f,5f,9.3f,6f,5.2f,1.67f,7f,3f,0f] as float[]","[6.4,-5.2,1d,0d,5.2d,1.11d,5d,83d,3d] as double[]","[0,4,4,7,5,1,8,6,3,41,2,6,3,9,4,84,5] as char[]","[\"watch\",\"dominion\",\"movie\",\"now\",\"!\"] as String[]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A `ValueSet` can handle all kinds of item types. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.of(Tuple.of(type, items))","var set = items as Set"]},

        {"kind":"expect","text":"","code":["valueSet.type() == type"]},

        {"kind":"when","text":"","code":["var tupleResult = valueSet.removeAll(valueSet.toTuple().sort().slice(1, 5))"]},

        {"kind":"and","text":"","code":["var setResult = set - set.toList().toSorted().subList(1, 5)"]},

        {"kind":"then","text":"","code":["tupleResult.toSet() == setResult"]},

        {"kind":"where","text":"","code":{"type":["Integer","Byte","Short","Long","Float","Double","Character","String"],"items":["[0,5,-4,-3,5,1,0,4,8,41,2,6,-3,9,4,5] as int[]","[2,8,1,7,5,1,3,7,8,41,2,7,3,0,-4,8,1] as byte[]","[4,5,7,93,5,1,2,77,8,41,2,6,63,9,4,7] as short[]","[6,6,-8,23,5,1,-60,6,-3,41,6,6,3,9,4] as long[]","[0.3f,5f,9.3f,6f,5.2f,1.67f,7f,3f,0f] as float[]","[6.4,-5.2,1d,0d,5.2d,1.11d,5d,83d,3d] as double[]","[0,4,4,7,5,1,8,6,3,41,2,6,3,9,4,84,5] as char[]","[\"watch\",\"dominion\",\"movie\",\"now\",\"!\"] as String[]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
