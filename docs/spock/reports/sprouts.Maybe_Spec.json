{
  "className":"sprouts.Maybe_Spec",
  "title":"Maybe",
  "narrative":"`Maybe` is a monadic type interface which can\n    be created by one of the many factory methods on its interface.\n    The returned `Maybe`s are immutable and\n    cannot be changed once they are created.\n    Their equality is based on the value they hold,\n    not the identity of the maybe itself.\n\n    The `Maybe` interface is also a general super\n    type for Sprouts properties as well as the `Result` monad.\n    Its API ensures that you can safely work with\n    nullable values in a functional way.",
  "subjects":["sprouts.Maybe"],
  "statistics":{
    "runs":"7",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Use `isOneOf(..)` to check if a property item is equal to one of the provided items.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `isOneOf(..)` method is a shorthand for checking if the wrapped value of a `Maybe`\n            is equal to one of the provided items.\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["Maybe.of(42).isOneOf(24, 42, 7)","!Maybe.of(4).isOneOf(1, -1, 0)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `isOneOf(..)` to check if property item is equal to an item in an array of provided `Maybe` instances.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `isOneOf(..)` method is a shorthand for checking if the wrapped value of a property\n            is equal to one of the provided items.\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["Maybe.of(2).isOneOf(Maybe.of(1), Maybe.of(2), Maybe.of(3))","!Maybe.of(42).isOneOf(Maybe.of(11), Maybe.of(7), Maybe.of(4))"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `or(Supplier)` method allows you to provide a fallback monad if the maybe is empty.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `or` method is similar to the `or` method on `Optional`.\n            If the current property is empty (i.e. `null`), the `supplier` is called\n            and the first non-null value is returned.\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["Maybe.ofNull(Integer).or(() -> Maybe.of(42)).orElseThrowUnchecked() == 42","Maybe.of(42).or(() -> Maybe.of(24)).orElseThrowUnchecked() == 42"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `ifPresentOrElse(..)` to execute a consumer if the property is not empty, otherwise execute a runnable.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `ifPresentOrElse` method is similar to the `ifPresentOrElse` method on `Optional`.\n            If the current property is not empty (i.e. not `null`), the `consumer` is called.\n            Otherwise, the `runnable` is executed.\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["def result = 0","Maybe.of(42).ifPresentOrElse({ result = it }, { result = -1 })","result == 42","Maybe.ofNull(Integer).ifPresentOrElse({ result = it }, { result = -1 })","result == -1"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `orElseGet(..)` to provide a fallback value if the property is empty.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `orElseGet` method is similar to the `orElseGet` method on `Optional`.\n            If the current property is empty (i.e. `null`), the `supplier` is called\n            and the first non-null value is returned.\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["Maybe.ofNull(Integer).orElseGet(() -> 42) == 42","Maybe.of(42).orElseGet(() -> 24) == 42"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `orElseNullable(T)` to provide a fallback value if the property is empty.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `orElseNullable` method is similar to the `orElse` method on `Optional`.\n            If the current property is empty (i.e. `null`), the provided value is returned.\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["Maybe.ofNull(Integer).orElseNullable(42) == 42","Maybe.of(42).orElseNullable(24) == 42","Maybe.ofNull(Integer).orElseNullable(null) == null"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `orElse(T)` method throws an exception when passing null to it.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `orElse` method is similar to the `orElse` method on `Optional`\n            with the exception that it throws an `NullPointerException` when\n            passing `null` to it.\n            Use `orElseNullable` if you want to return `null` as a fallback value.\n            If the current property is empty (i.e. `null`), the provided value is returned,\n            otherwise the value of the property is returned.\n        "]
      },
      "blocks":[
        {"kind":"expect","text":"","code":["Maybe.ofNull(Integer).orElse(42) == 42","Maybe.of(42).orElse(24) == 42"]},

        {"kind":"when","text":"","code":["Maybe.ofNull(Integer).orElse(null)"]},

        {"kind":"then","text":"","code":["thrown(NullPointerException)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
