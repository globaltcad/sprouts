{
  "className":"sprouts.Linked_ValueSet_Spec",
  "title":"Linked ValueSet - a Data Oriented Set",
  "narrative":"A linked `ValueSet` is a fundamental building block in sprouts' data-oriented programming model.\n    It represents an immutable collection of unique and ordered elements, providing an API focused on\n    deriving new sets from existing ones rather than mutating state. Unlike traditional\n    Java sets, all operations return new `ValueSet` instances, making it ideal for\n    functional/data-oriented programming and safe concurrent usage.\n\n    You can create a linked `ValueSet` through various factories, such as `ValueSet.ofLinked(Class<T>)`\n    or `ValueSet.ofLinked(T first, T... rest)`. All operations on a linked `ValueSet` return a new instance,\n    ensuring immutability and thread safety. The linked nature of the set ensures that the order of elements\n    is preserved, which is particularly relevant to make iteration and stream operations more\n    deterministic and easier to reason about.",
  "subjects":["sprouts.ValueSet"],
  "statistics":{
    "runs":"77",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Use `ValueSet.ofLinked(Class, Iterable)` to create a linked value set from an iterable.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var iterable = [\"a\", \"b\", \"c\", \"d\", \"e\"] as Iterable<String>"]},

        {"kind":"when","text":"","code":["var valueSet = ValueSet.ofLinked(String, iterable)"]},

        {"kind":"then","text":"","code":["valueSet.size() == 5","valueSet.type() == String","valueSet.toList() == [\"a\", \"b\", \"c\", \"d\", \"e\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"An empty linked `ValueSet` is created by specifying the element type.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A `ValueSet` needs to be created with a type to allow for better\n            type safety during runtime as well as improved performance\n            due to primitive specialization.\n            A `ValueSet` based on the `Integer` class for example, will\n            internally use a primitive `int[]` array to store the values.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var emptySet = ValueSet.ofLinked(String)"]},

        {"kind":"expect","text":"","code":["emptySet.isEmpty()","emptySet.type() == String","!emptySet.isSorted()","emptySet.isLinked()"]},

        {"kind":"when","text":"","code":["var emptySet2 = ValueSet.ofLinked(Integer)"]},

        {"kind":"then","text":"","code":["emptySet2.isEmpty()","emptySet2.type() == Integer","!emptySet2.isSorted()","emptySet2.isLinked()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A linked `ValueSet` maintains invariance with Java Set across many operations. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.ofLinked(String)","var referenceSet = new HashSet<>()","var operationsApplier = { currentSet ->","    operations.each { op, element ->","        switch (op) {","            case Operation.ADD:","                currentSet = currentSet.add(element)","                referenceSet.add(element)","                break","            case Operation.REMOVE:","                currentSet = currentSet.remove(element)","                referenceSet.remove(element)","                break","            case Operation.CLEAR:","                currentSet = currentSet.clear()","                referenceSet.clear()","                break","        }","    }","    return currentSet","}"]},

        {"kind":"when","text":"Apply operations first time","code":["valueSet = operationsApplier(valueSet) as ValueSet<String>"]},

        {"kind":"then","text":"Immediate invariance","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet","valueSet.isLinked()","!valueSet.isSorted()"]},

        {"kind":"when","text":"Apply operations multiple times","code":["5.times {","    valueSet = operationsApplier(valueSet) as ValueSet<String>","}"]},

        {"kind":"then","text":"Consistent state","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet","valueSet.isLinked()","!valueSet.isSorted()"]},

        {"kind":"when","text":"We use the stream API to map both the value set and the JDK based reference set.","code":["var mappedValueSet = valueSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOfLinked(String.class))","var mappedSet = referenceSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and mapped set are equal.","code":["mappedValueSet.toSet() == mappedSet"]},

        {"kind":"when","text":"We use the parallel stream API to map both the value set and the reference set.","code":["var mappedValueSetParallel = valueSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOfLinked(String.class))","var mappedSetParallel = referenceSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and JDK set are equal in terms of their contents.","code":["mappedValueSetParallel.toSet() == mappedSetParallel"]},

        {"kind":"where","text":"","code":{"operations":["new Tuple2(Operation.ADD, \"apple\"),\n            new Tuple2(Operation.ADD, \"banana\"),\n            new Tuple2(Operation.REMOVE, \"apple\")\n        ]","(0..100).collect {\n            new Tuple2(it % 2 == 0 ? Operation.ADD : Operation.REMOVE,\n                    \"item-\"+(it % 50))\n        }","(0..1000).collect {\n            new Tuple2(new Random(it).nextBoolean() ? Operation.ADD : Operation.REMOVE,\n                    \"element-\"+Math.abs(new Random(it).nextInt() % 500))\n        }","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 50, which\n                means 50 add operations, then 50 remove operations then 50 add... etc.\n                There is a total of 160 possible values!\n             */\n            var hash = Math.abs((it*1997) % 160)\n            var operation = ((int)(it/50)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 100, which\n                means 100 add operations, then 100 remove operations then 100 add... etc.\n                There is a total of 190 possible values!\n             */\n            var hash = Math.abs((it*1997) % 190)\n            var operation = ((int)(it/100)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A linked `ValueSet` maintains invariance with Java Set across many operations. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.ofLinked(String)","var referenceSet = new HashSet<>()","var operationsApplier = { currentSet ->","    operations.each { op, element ->","        switch (op) {","            case Operation.ADD:","                currentSet = currentSet.add(element)","                referenceSet.add(element)","                break","            case Operation.REMOVE:","                currentSet = currentSet.remove(element)","                referenceSet.remove(element)","                break","            case Operation.CLEAR:","                currentSet = currentSet.clear()","                referenceSet.clear()","                break","        }","    }","    return currentSet","}"]},

        {"kind":"when","text":"Apply operations first time","code":["valueSet = operationsApplier(valueSet) as ValueSet<String>"]},

        {"kind":"then","text":"Immediate invariance","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet","valueSet.isLinked()","!valueSet.isSorted()"]},

        {"kind":"when","text":"Apply operations multiple times","code":["5.times {","    valueSet = operationsApplier(valueSet) as ValueSet<String>","}"]},

        {"kind":"then","text":"Consistent state","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet","valueSet.isLinked()","!valueSet.isSorted()"]},

        {"kind":"when","text":"We use the stream API to map both the value set and the JDK based reference set.","code":["var mappedValueSet = valueSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOfLinked(String.class))","var mappedSet = referenceSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and mapped set are equal.","code":["mappedValueSet.toSet() == mappedSet"]},

        {"kind":"when","text":"We use the parallel stream API to map both the value set and the reference set.","code":["var mappedValueSetParallel = valueSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOfLinked(String.class))","var mappedSetParallel = referenceSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and JDK set are equal in terms of their contents.","code":["mappedValueSetParallel.toSet() == mappedSetParallel"]},

        {"kind":"where","text":"","code":{"operations":["new Tuple2(Operation.ADD, \"apple\"),\n            new Tuple2(Operation.ADD, \"banana\"),\n            new Tuple2(Operation.REMOVE, \"apple\")\n        ]","(0..100).collect {\n            new Tuple2(it % 2 == 0 ? Operation.ADD : Operation.REMOVE,\n                    \"item-\"+(it % 50))\n        }","(0..1000).collect {\n            new Tuple2(new Random(it).nextBoolean() ? Operation.ADD : Operation.REMOVE,\n                    \"element-\"+Math.abs(new Random(it).nextInt() % 500))\n        }","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 50, which\n                means 50 add operations, then 50 remove operations then 50 add... etc.\n                There is a total of 160 possible values!\n             */\n            var hash = Math.abs((it*1997) % 160)\n            var operation = ((int)(it/50)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 100, which\n                means 100 add operations, then 100 remove operations then 100 add... etc.\n                There is a total of 190 possible values!\n             */\n            var hash = Math.abs((it*1997) % 190)\n            var operation = ((int)(it/100)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A linked `ValueSet` maintains invariance with Java Set across many operations. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.ofLinked(String)","var referenceSet = new HashSet<>()","var operationsApplier = { currentSet ->","    operations.each { op, element ->","        switch (op) {","            case Operation.ADD:","                currentSet = currentSet.add(element)","                referenceSet.add(element)","                break","            case Operation.REMOVE:","                currentSet = currentSet.remove(element)","                referenceSet.remove(element)","                break","            case Operation.CLEAR:","                currentSet = currentSet.clear()","                referenceSet.clear()","                break","        }","    }","    return currentSet","}"]},

        {"kind":"when","text":"Apply operations first time","code":["valueSet = operationsApplier(valueSet) as ValueSet<String>"]},

        {"kind":"then","text":"Immediate invariance","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet","valueSet.isLinked()","!valueSet.isSorted()"]},

        {"kind":"when","text":"Apply operations multiple times","code":["5.times {","    valueSet = operationsApplier(valueSet) as ValueSet<String>","}"]},

        {"kind":"then","text":"Consistent state","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet","valueSet.isLinked()","!valueSet.isSorted()"]},

        {"kind":"when","text":"We use the stream API to map both the value set and the JDK based reference set.","code":["var mappedValueSet = valueSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOfLinked(String.class))","var mappedSet = referenceSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and mapped set are equal.","code":["mappedValueSet.toSet() == mappedSet"]},

        {"kind":"when","text":"We use the parallel stream API to map both the value set and the reference set.","code":["var mappedValueSetParallel = valueSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOfLinked(String.class))","var mappedSetParallel = referenceSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and JDK set are equal in terms of their contents.","code":["mappedValueSetParallel.toSet() == mappedSetParallel"]},

        {"kind":"where","text":"","code":{"operations":["new Tuple2(Operation.ADD, \"apple\"),\n            new Tuple2(Operation.ADD, \"banana\"),\n            new Tuple2(Operation.REMOVE, \"apple\")\n        ]","(0..100).collect {\n            new Tuple2(it % 2 == 0 ? Operation.ADD : Operation.REMOVE,\n                    \"item-\"+(it % 50))\n        }","(0..1000).collect {\n            new Tuple2(new Random(it).nextBoolean() ? Operation.ADD : Operation.REMOVE,\n                    \"element-\"+Math.abs(new Random(it).nextInt() % 500))\n        }","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 50, which\n                means 50 add operations, then 50 remove operations then 50 add... etc.\n                There is a total of 160 possible values!\n             */\n            var hash = Math.abs((it*1997) % 160)\n            var operation = ((int)(it/50)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 100, which\n                means 100 add operations, then 100 remove operations then 100 add... etc.\n                There is a total of 190 possible values!\n             */\n            var hash = Math.abs((it*1997) % 190)\n            var operation = ((int)(it/100)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A linked `ValueSet` maintains invariance with Java Set across many operations. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.ofLinked(String)","var referenceSet = new HashSet<>()","var operationsApplier = { currentSet ->","    operations.each { op, element ->","        switch (op) {","            case Operation.ADD:","                currentSet = currentSet.add(element)","                referenceSet.add(element)","                break","            case Operation.REMOVE:","                currentSet = currentSet.remove(element)","                referenceSet.remove(element)","                break","            case Operation.CLEAR:","                currentSet = currentSet.clear()","                referenceSet.clear()","                break","        }","    }","    return currentSet","}"]},

        {"kind":"when","text":"Apply operations first time","code":["valueSet = operationsApplier(valueSet) as ValueSet<String>"]},

        {"kind":"then","text":"Immediate invariance","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet","valueSet.isLinked()","!valueSet.isSorted()"]},

        {"kind":"when","text":"Apply operations multiple times","code":["5.times {","    valueSet = operationsApplier(valueSet) as ValueSet<String>","}"]},

        {"kind":"then","text":"Consistent state","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet","valueSet.isLinked()","!valueSet.isSorted()"]},

        {"kind":"when","text":"We use the stream API to map both the value set and the JDK based reference set.","code":["var mappedValueSet = valueSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOfLinked(String.class))","var mappedSet = referenceSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and mapped set are equal.","code":["mappedValueSet.toSet() == mappedSet"]},

        {"kind":"when","text":"We use the parallel stream API to map both the value set and the reference set.","code":["var mappedValueSetParallel = valueSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOfLinked(String.class))","var mappedSetParallel = referenceSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and JDK set are equal in terms of their contents.","code":["mappedValueSetParallel.toSet() == mappedSetParallel"]},

        {"kind":"where","text":"","code":{"operations":["new Tuple2(Operation.ADD, \"apple\"),\n            new Tuple2(Operation.ADD, \"banana\"),\n            new Tuple2(Operation.REMOVE, \"apple\")\n        ]","(0..100).collect {\n            new Tuple2(it % 2 == 0 ? Operation.ADD : Operation.REMOVE,\n                    \"item-\"+(it % 50))\n        }","(0..1000).collect {\n            new Tuple2(new Random(it).nextBoolean() ? Operation.ADD : Operation.REMOVE,\n                    \"element-\"+Math.abs(new Random(it).nextInt() % 500))\n        }","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 50, which\n                means 50 add operations, then 50 remove operations then 50 add... etc.\n                There is a total of 160 possible values!\n             */\n            var hash = Math.abs((it*1997) % 160)\n            var operation = ((int)(it/50)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 100, which\n                means 100 add operations, then 100 remove operations then 100 add... etc.\n                There is a total of 190 possible values!\n             */\n            var hash = Math.abs((it*1997) % 190)\n            var operation = ((int)(it/100)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A linked `ValueSet` maintains invariance with Java Set across many operations. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.ofLinked(String)","var referenceSet = new HashSet<>()","var operationsApplier = { currentSet ->","    operations.each { op, element ->","        switch (op) {","            case Operation.ADD:","                currentSet = currentSet.add(element)","                referenceSet.add(element)","                break","            case Operation.REMOVE:","                currentSet = currentSet.remove(element)","                referenceSet.remove(element)","                break","            case Operation.CLEAR:","                currentSet = currentSet.clear()","                referenceSet.clear()","                break","        }","    }","    return currentSet","}"]},

        {"kind":"when","text":"Apply operations first time","code":["valueSet = operationsApplier(valueSet) as ValueSet<String>"]},

        {"kind":"then","text":"Immediate invariance","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet","valueSet.isLinked()","!valueSet.isSorted()"]},

        {"kind":"when","text":"Apply operations multiple times","code":["5.times {","    valueSet = operationsApplier(valueSet) as ValueSet<String>","}"]},

        {"kind":"then","text":"Consistent state","code":["valueSet.size() == referenceSet.size()","valueSet.containsAll(referenceSet)","valueSet.toSet() == referenceSet","valueSet.isLinked()","!valueSet.isSorted()"]},

        {"kind":"when","text":"We use the stream API to map both the value set and the JDK based reference set.","code":["var mappedValueSet = valueSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOfLinked(String.class))","var mappedSet = referenceSet.stream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and mapped set are equal.","code":["mappedValueSet.toSet() == mappedSet"]},

        {"kind":"when","text":"We use the parallel stream API to map both the value set and the reference set.","code":["var mappedValueSetParallel = valueSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(ValueSet.collectorOfLinked(String.class))","var mappedSetParallel = referenceSet.parallelStream().map({ it.toUpperCase() + \"!\" }).filter({ it.hashCode() % 2 == 0 }).collect(Collectors.toSet())"]},

        {"kind":"then","text":"The mapped value set and JDK set are equal in terms of their contents.","code":["mappedValueSetParallel.toSet() == mappedSetParallel"]},

        {"kind":"where","text":"","code":{"operations":["new Tuple2(Operation.ADD, \"apple\"),\n            new Tuple2(Operation.ADD, \"banana\"),\n            new Tuple2(Operation.REMOVE, \"apple\")\n        ]","(0..100).collect {\n            new Tuple2(it % 2 == 0 ? Operation.ADD : Operation.REMOVE,\n                    \"item-\"+(it % 50))\n        }","(0..1000).collect {\n            new Tuple2(new Random(it).nextBoolean() ? Operation.ADD : Operation.REMOVE,\n                    \"element-\"+Math.abs(new Random(it).nextInt() % 500))\n        }","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 50, which\n                means 50 add operations, then 50 remove operations then 50 add... etc.\n                There is a total of 160 possible values!\n             */\n            var hash = Math.abs((it*1997) % 160)\n            var operation = ((int)(it/50)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })","(0..10_000).collect({\n            /*\n                Here the operations come in sequences of 100, which\n                means 100 add operations, then 100 remove operations then 100 add... etc.\n                There is a total of 190 possible values!\n             */\n            var hash = Math.abs((it*1997) % 190)\n            var operation = ((int)(it/100)) % 2 == 0 ? Operation.REMOVE : Operation.ADD\n            return new Tuple2(operation, (hash*1997).toString())\n        })"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Set operations maintain mathematical set properties",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.ofLinked(Integer).add(1).add(2).add(3)"]},

        {"kind":"when","text":"Union with another set","code":["var union = initial.addAll(ValueSet.ofLinked(3,4,5))"]},

        {"kind":"then","text":"","code":["union.toSet() == [1,2,3,4,5] as Set"]},

        {"kind":"when","text":"Intersection","code":["var intersection = initial.retainAll([2,3,4] as Set)"]},

        {"kind":"then","text":"","code":["intersection.toSet() == [2,3] as Set"]},

        {"kind":"when","text":"Difference","code":["var difference = initial.removeAll([3] as Set)"]},

        {"kind":"then","text":"","code":["difference.toSet() == [1,2] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Equality and hash code follow set semantics",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var set1 = ValueSet.ofLinked(\"a\", \"b\", \"c\")","var set2 = ValueSet.ofLinked(\"c\", \"b\", \"a\")","var set3 = set1.add(\"d\")"]},

        {"kind":"expect","text":"","code":["set1 == set2","set1.hashCode() == set2.hashCode()","set1 != set3"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Bulk operations handle large datasets efficiently",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var size = 10_000","var elements = (1..size).collect { \"item-\"+it }","var valueSet = ValueSet.ofLinked(String).addAll(elements)"]},

        {"kind":"expect","text":"","code":["valueSet.size() == size","elements.every { valueSet.contains(it) }"]},

        {"kind":"when","text":"","code":["var removed = valueSet.removeAll(elements[0..5000])"]},

        {"kind":"then","text":"","code":["removed.size() == size - 5001"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Immutable characteristics are preserved",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var original = ValueSet.ofLinked(\"a\", \"b\")","var modified = original.add(\"c\")"]},

        {"kind":"expect","text":"","code":["original.size() == 2","modified.size() == 3","!original.contains(\"c\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `clear` operation works on a non-empty value set",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var set = ValueSet.ofLinked(1,2,3)"]},

        {"kind":"expect","text":"Contains checks","code":["set.isNotEmpty() && set.size() == 3","set.contains(2) && !set.contains(4)"]},

        {"kind":"when","text":"We apply the clear operation.","code":["var cleared = set.clear()"]},

        {"kind":"then","text":"","code":["cleared.isEmpty()","cleared.type() == Integer"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"String representation reflects contents",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var smallSet = ValueSet.ofLinked(\"b\", \"a\", \"c\")","var largeSet = ValueSet.ofLinked(Integer).addAll(1..35)"]},

        {"kind":"expect","text":"","code":["smallSet.toString() == 'LinkedValueSet<String>[\"b\", \"a\", \"c\"]'","largeSet.toString().contains(\"... 27 items left]\")"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Null based edge cases are handled gracefully.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Adding null element","code":["ValueSet.ofLinked(String).add(null)"]},

        {"kind":"then","text":"","code":["thrown(NullPointerException)"]},

        {"kind":"when","text":"Null element type","code":["ValueSet.ofLinked(null)"]},

        {"kind":"then","text":"","code":["thrown(NullPointerException)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can collect a `Stream` into a linked `ValueSet`.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var elements = [\"apple\", \"banana\", \"cherry\"]","var stream = elements.stream()"]},

        {"kind":"when","text":"","code":["var collectedSet = stream.collect(ValueSet.collectorOfLinked(String))"]},

        {"kind":"then","text":"","code":["collectedSet.toSet() == elements as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The linked `ValueSet` supports Set operations with Java collections",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked ValueSet and a Java Set, both containing some elements.","code":["var valueSet = ValueSet.ofLinked(\"a\", \"b\", \"c\")","var javaSet = [\"b\", \"c\", \"d\"] as Set"]},

        {"kind":"when","text":"We perform a union with another Java set...","code":["var union = valueSet.addAll(javaSet)"]},

        {"kind":"then","text":"The union contains all unique elements:","code":["union.toSet() == [\"a\", \"b\", \"c\", \"d\"] as Set"]},

        {"kind":"when","text":"Intersect with a Java set...","code":["var intersection = valueSet.retainAll(javaSet)"]},

        {"kind":"then","text":"The intersection contains only common elements:","code":["intersection.toSet() == [\"b\", \"c\"] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Iterator behavior conforms to set semantics",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var set = ValueSet.ofLinked(1,2,3)","var iterated = []"]},

        {"kind":"when","text":"","code":["for ( var element : set ) {","    iterated << element","}"]},

        {"kind":"then","text":"","code":["iterated.size() == 3","iterated == [1,2,3]"]},

        {"kind":"when","text":"We add some more elements to the set.","code":["set = set.add(4).add(5)","iterated.clear()","for ( var element : set ) {","    iterated << element","}"]},

        {"kind":"then","text":"","code":["iterated.size() == 5","iterated == [1,2,3,4,5]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Empty set special cases",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var empty = ValueSet.ofLinked(String).clear()"]},

        {"kind":"expect","text":"","code":["empty.isEmpty()","empty.type() == String","empty.add(\"test\").size() == 1","empty.isLinked()","!empty.isSorted()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Duplicate additions have no effect",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var set = ValueSet.ofLinked(\"a\").add(\"a\").add(\"a\")"]},

        {"kind":"expect","text":"","code":["set.size() == 1"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"addAll supports various collection types",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.ofLinked(\"a\")"]},

        {"kind":"expect","text":"Elements from different collection types are added correctly","code":["initial.addAll([\"b\", \"c\"] as List).toSet() == [\"a\", \"b\", \"c\"] as Set","initial.addAll([\"b\", \"c\"] as Set).toSet() == [\"a\", \"b\", \"c\"] as Set","initial.addAll(Tuple.of(\"b\", \"c\")).toSet() == [\"a\", \"b\", \"c\"] as Set","initial.addAll([\"b\", \"c\"] as String[]).toSet() == [\"a\", \"b\", \"c\"] as Set","initial.addAll(Stream.of(\"b\", \"c\")).toSet() == [\"a\", \"b\", \"c\"] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `removeAll(..)` methods handle different input collection types.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.ofLinked(\"a\", \"b\", \"c\", \"d\")"]},

        {"kind":"expect","text":"Elements are removed regardless of input collection type","code":["initial.removeAll([\"a\", \"b\"] as List).toSet() == [\"c\", \"d\"] as Set","initial.removeAll([\"c\"] as Set).toSet() == [\"a\", \"b\", \"d\"] as Set","initial.removeAll(Tuple.of(\"d\", \"e\")).toSet() == [\"a\", \"b\", \"c\"] as Set","initial.removeAll([\"b\", \"c\"] as String[]).toSet() == [\"a\", \"d\"] as Set","initial.removeAll(Stream.of(\"a\", \"d\")).toSet() == [\"b\", \"c\"] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can remove items from a linked value set selectively, using `removeIf(Predicate)`. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can remove elements from a value set which satisfy\n            a given `Predicate`. Or in other words,\n            if the `Predicate.test(Object)` method yields `true` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"We apply a predicate to both types of sets...","code":["var updatedValueSet = valueSet.removeIf(predicate)","set.removeIf(predicate)"]},

        {"kind":"then","text":"They contain the same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({ Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can remove items from a linked value set selectively, using `removeIf(Predicate)`. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can remove elements from a value set which satisfy\n            a given `Predicate`. Or in other words,\n            if the `Predicate.test(Object)` method yields `true` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"We apply a predicate to both types of sets...","code":["var updatedValueSet = valueSet.removeIf(predicate)","set.removeIf(predicate)"]},

        {"kind":"then","text":"They contain the same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({ Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can remove items from a linked value set selectively, using `removeIf(Predicate)`. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can remove elements from a value set which satisfy\n            a given `Predicate`. Or in other words,\n            if the `Predicate.test(Object)` method yields `true` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"We apply a predicate to both types of sets...","code":["var updatedValueSet = valueSet.removeIf(predicate)","set.removeIf(predicate)"]},

        {"kind":"then","text":"They contain the same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({ Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can remove items from a linked value set selectively, using `removeIf(Predicate)`. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can remove elements from a value set which satisfy\n            a given `Predicate`. Or in other words,\n            if the `Predicate.test(Object)` method yields `true` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"We apply a predicate to both types of sets...","code":["var updatedValueSet = valueSet.removeIf(predicate)","set.removeIf(predicate)"]},

        {"kind":"then","text":"They contain the same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({ Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can remove items from a linked value set selectively, using `removeIf(Predicate)`. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can remove elements from a value set which satisfy\n            a given `Predicate`. Or in other words,\n            if the `Predicate.test(Object)` method yields `true` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"We apply a predicate to both types of sets...","code":["var updatedValueSet = valueSet.removeIf(predicate)","set.removeIf(predicate)"]},

        {"kind":"then","text":"They contain the same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({ Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can remove items from a linked value set selectively, using `removeIf(Predicate)`. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can remove elements from a value set which satisfy\n            a given `Predicate`. Or in other words,\n            if the `Predicate.test(Object)` method yields `true` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"We apply a predicate to both types of sets...","code":["var updatedValueSet = valueSet.removeIf(predicate)","set.removeIf(predicate)"]},

        {"kind":"then","text":"They contain the same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({ Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can remove items from a linked value set selectively, using `removeIf(Predicate)`. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can remove elements from a value set which satisfy\n            a given `Predicate`. Or in other words,\n            if the `Predicate.test(Object)` method yields `true` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"We apply a predicate to both types of sets...","code":["var updatedValueSet = valueSet.removeIf(predicate)","set.removeIf(predicate)"]},

        {"kind":"then","text":"They contain the same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({ Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can keep items in a linked value set selectively, using `retainIf(Predicate)`. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can keep elements in a value set which satisfy\n            a given `Predicate` and have them removed otherwise. Or in other words,\n            if the `Predicate.test(Object)` method yields `false` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"\n            We apply a predicate to both types of sets...\n            In case of the JDK set we use the negation of `removeIf`,\n            which does the same thing effectively.\n        ","code":["var updatedValueSet = valueSet.retainIf(predicate)","set.removeIf(predicate.negate())"]},

        {"kind":"then","text":"They contain he same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can keep items in a linked value set selectively, using `retainIf(Predicate)`. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can keep elements in a value set which satisfy\n            a given `Predicate` and have them removed otherwise. Or in other words,\n            if the `Predicate.test(Object)` method yields `false` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"\n            We apply a predicate to both types of sets...\n            In case of the JDK set we use the negation of `removeIf`,\n            which does the same thing effectively.\n        ","code":["var updatedValueSet = valueSet.retainIf(predicate)","set.removeIf(predicate.negate())"]},

        {"kind":"then","text":"They contain he same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can keep items in a linked value set selectively, using `retainIf(Predicate)`. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can keep elements in a value set which satisfy\n            a given `Predicate` and have them removed otherwise. Or in other words,\n            if the `Predicate.test(Object)` method yields `false` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"\n            We apply a predicate to both types of sets...\n            In case of the JDK set we use the negation of `removeIf`,\n            which does the same thing effectively.\n        ","code":["var updatedValueSet = valueSet.retainIf(predicate)","set.removeIf(predicate.negate())"]},

        {"kind":"then","text":"They contain he same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can keep items in a linked value set selectively, using `retainIf(Predicate)`. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can keep elements in a value set which satisfy\n            a given `Predicate` and have them removed otherwise. Or in other words,\n            if the `Predicate.test(Object)` method yields `false` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"\n            We apply a predicate to both types of sets...\n            In case of the JDK set we use the negation of `removeIf`,\n            which does the same thing effectively.\n        ","code":["var updatedValueSet = valueSet.retainIf(predicate)","set.removeIf(predicate.negate())"]},

        {"kind":"then","text":"They contain he same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can keep items in a linked value set selectively, using `retainIf(Predicate)`. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can keep elements in a value set which satisfy\n            a given `Predicate` and have them removed otherwise. Or in other words,\n            if the `Predicate.test(Object)` method yields `false` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"\n            We apply a predicate to both types of sets...\n            In case of the JDK set we use the negation of `removeIf`,\n            which does the same thing effectively.\n        ","code":["var updatedValueSet = valueSet.retainIf(predicate)","set.removeIf(predicate.negate())"]},

        {"kind":"then","text":"They contain he same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can keep items in a linked value set selectively, using `retainIf(Predicate)`. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can keep elements in a value set which satisfy\n            a given `Predicate` and have them removed otherwise. Or in other words,\n            if the `Predicate.test(Object)` method yields `false` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"\n            We apply a predicate to both types of sets...\n            In case of the JDK set we use the negation of `removeIf`,\n            which does the same thing effectively.\n        ","code":["var updatedValueSet = valueSet.retainIf(predicate)","set.removeIf(predicate.negate())"]},

        {"kind":"then","text":"They contain he same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"You can keep items in a linked value set selectively, using `retainIf(Predicate)`. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            You can keep elements in a value set which satisfy\n            a given `Predicate` and have them removed otherwise. Or in other words,\n            if the `Predicate.test(Object)` method yields `false` for a particular\n            element, then it will be removed, otherwise, it will remain in the\n            returned set.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create a linked value set and a regular JDK set containing some test elements.","code":["var valueSet = ValueSet.ofLinked(type, elements)","var set = elements.toSet()"]},

        {"kind":"when","text":"\n            We apply a predicate to both types of sets...\n            In case of the JDK set we use the negation of `removeIf`,\n            which does the same thing effectively.\n        ","code":["var updatedValueSet = valueSet.retainIf(predicate)","set.removeIf(predicate.negate())"]},

        {"kind":"then","text":"They contain he same elements!","code":["updatedValueSet.toSet() == set"]},

        {"kind":"where","text":"","code":{"type":["Float","Integer","String","Short","Character","Boolean","Month"],"elements":["[4.3f, 7f, 0.1f, 26.34f, 23f, 86.3f, 218f, 2f, 1.2f, 9f]","(-50..50).toList()","(-50..50).collect({Integer it -> it + \"!\"}).toList()","(0..1000).collect({Integer it -> it as Short}).toList()","['a' as char, 'x' as char, '4' as char, '#' as char]","(0..100).collect({Integer it -> ( it * 1997 ) % 2 == 0})","(0..100).collect({Integer it -> Month.values()[it%12]})"],"predicate":["{ (it - it % 1) == it  }","{ it % 3 == 1 }","{ it.hashCode() % 5 == 1 }","{ it * 1997 % 8 == 2 }","{ it == 'x' as char }","{ it }","{ it == Month.DECEMBER }"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `retainAll(..)` methods work with diverse collection sources.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.ofLinked(\"a\", \"b\", \"c\", \"d\")"]},

        {"kind":"expect","text":"Only elements present in both collections are retained","code":["initial.retainAll([\"b\", \"c\"] as List).toSet() == [\"b\", \"c\"] as Set","initial.retainAll([\"a\", \"d\"] as Set).toSet() == [\"a\", \"d\"] as Set","initial.retainAll(Tuple.of(\"c\", \"e\")).toSet() == [\"c\"] as Set","initial.retainAll([\"d\"] as String[]).toSet() == [\"d\"] as Set","initial.retainAll(Stream.of(\"a\", \"b\")).toSet() == [\"a\", \"b\"] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The various `containsAll(..)` methods accurately check membership across collection types.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.ofLinked(\"a\", \"b\", \"c\")"]},

        {"kind":"expect","text":"Membership checks work with all compatible collection types","code":["valueSet.containsAll([\"a\", \"b\"] as List)","valueSet.containsAll([\"b\", \"c\"] as Set)","valueSet.containsAll([\"b\", \"c\"] as Iterable<String>)","valueSet.containsAll([\"a\", \"b\", \"c\"] as String[])","valueSet.containsAll([\"a\", \"b\", \"c\"].stream())","valueSet.containsAll(Stream.of(\"b\", \"c\"))","valueSet.containsAll(Tuple.of(\"a\", \"c\"))","!valueSet.containsAll([\"a\", \"d\"] as List)","!valueSet.containsAll([\"a\", \"d\"] as Set)","!valueSet.containsAll([\"a\", \"d\"] as Iterable<String>)","!valueSet.containsAll([\"a\", \"d\"] as String[])","!valueSet.containsAll([\"a\", \"d\"].stream())","!valueSet.containsAll(Tuple.of(\"a\", \"d\"))","valueSet.containsAll([] as Set) // Empty collection always returns true","valueSet.containsAll(ValueSet.ofLinked(\"a\", \"c\"))","!valueSet.containsAll(ValueSet.ofLinked(\"b\", \"c\", \"d\"))"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"operations with empty collections have no effect or clear as expected",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.ofLinked(\"a\", \"b\")"]},

        {"kind":"expect","text":"Empty inputs leave set unchanged or clear appropriately","code":["initial.addAll([] as Set) == initial","initial.removeAll([] as Set) == initial","initial.retainAll([\"a\", \"b\"] as Set) == initial"]},

        {"kind":"when","text":"Retaining nothing clears the set","code":["var cleared = initial.retainAll([] as Set)"]},

        {"kind":"then","text":"","code":["cleared.isEmpty()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"bulk operations ignore duplicate elements in input",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.ofLinked(\"a\")"]},

        {"kind":"expect","text":"Duplicates in input collections have no effect","code":["initial.addAll([\"a\", \"a\", \"b\"] as List).toSet() == [\"a\", \"b\"] as Set","initial.removeAll([\"a\", \"a\"] as List).isEmpty()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"interoperates with Tuple collections",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var tuple = Tuple.of(\"x\", \"y\", \"z\")","var valueSet = ValueSet.ofLinked(String).addAll(tuple)"]},

        {"kind":"expect","text":"Full interoperability with Tuple collections","code":["valueSet.containsAll(tuple)","valueSet.removeAll(tuple).isEmpty()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"collector works with different stream sources",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"Collecting from various stream sources","code":["var fromList = [\"a\", \"b\"].stream().collect(ValueSet.collectorOfLinked(String))","var fromSet = ([\"c\", \"d\"] as Set).stream().collect(ValueSet.collectorOfLinked(String))","var fromArray = Arrays.stream([\"e\", \"f\"] as String[]).collect(ValueSet.collectorOfLinked(String))","var fromTuple = Tuple.of(\"g\", \"h\").stream().collect(ValueSet.collectorOfLinked(String))"]},

        {"kind":"then","text":"All collected sets match source contents","code":["fromList.toSet() == [\"a\", \"b\"] as Set","fromSet.toSet() == [\"c\", \"d\"] as Set","fromArray.toSet() == [\"e\", \"f\"] as Set","fromTuple.toSet() == [\"g\", \"h\"] as Set"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"no-op operations return the same instance",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var initial = ValueSet.ofLinked(\"a\", \"b\", \"c\", \"d\")","var sameElements = [\"a\", \"b\", \"c\", \"d\"] as Set<String>","var empty = Collections.emptySet() as Set<String>"]},

        {"kind":"expect","text":"Using no-op operations on the initial set does not return a new instance.","code":["initial.addAll(empty).is(initial)","initial.addAll(sameElements).is(initial)","initial.removeAll(empty).is(initial)","initial.retainAll(sameElements).is(initial)"]},

        {"kind":"and","text":"Adding existing elements does not change the set.","code":["initial.add(\"a\").is(initial)","initial.add(\"b\").is(initial)","initial.add(\"c\").is(initial)","initial.add(\"d\").is(initial)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use `ValueSet.classTyped(Class)` to created a typed class pointer to `ValueSet`.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            The `ValueSet.classTyped(Class)` may seem strange at first,\n            but it is really important when you want to use the value set\n            as a generic parameter type inferred from the class pointer.\n\n            Like for example:\n            ```java\n                Var<ValueSet<String>> strings = Var.of(ValueSet.classTyped(String.class));\n            ```\n        "]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var typed = ValueSet.classTyped(String)"]},

        {"kind":"expect","text":"","code":["typed == ValueSet.class"]},

        {"kind":"when","text":"","code":["ValueSet.classTyped(null)"]},

        {"kind":"then","text":"","code":["thrown(NullPointerException)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A value set can directly be created from a tuple.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var tuple = Tuple.of(\"c\", \"a\", \"b\", \"a\", \"c\", \"b\", \"c\", \"d\", \"e\", \"b\")"]},

        {"kind":"when","text":"","code":["var valueSet = ValueSet.ofLinked(tuple)"]},

        {"kind":"then","text":"","code":["valueSet.size() == 5","valueSet.toSet() == [\"a\", \"b\", \"c\", \"d\", \"e\"] as Set","valueSet.containsAll(tuple)","valueSet.type() == String"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Use the `sort(Comparator)` method to create a sorted value set from a linked one.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var valueSet = ValueSet.ofLinked(\"c\", \"a\", \"b\", \"a\", \"c\", \"b\", \"c\", \"d\", \"e\", \"b\")"]},

        {"kind":"when","text":"","code":["var sorted = valueSet.sort(Comparator.naturalOrder())"]},

        {"kind":"then","text":"","code":["sorted.size() == 5","sorted.type() == String","sorted.toList() == [\"a\", \"b\", \"c\", \"d\", \"e\"]"]},

        {"kind":"when","text":"We sort the value set in reverse order.","code":["var sortedReverse = valueSet.sort(Comparator.reverseOrder())"]},

        {"kind":"then","text":"","code":["sortedReverse.size() == 5","sortedReverse.type() == String","sortedReverse.toList() == [\"e\", \"d\", \"c\", \"b\", \"a\"]"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [14]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after removing a large part of elements. [15]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value set,\n            we can avoid a lot of work due to two set sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher1 = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","var keyHasher2 = { (it.hashCode() + (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort1 = (a, b) -> (keyHasher1(a)<=>keyHasher1(b))","Comparator<Object> randomSort2 = (a, b) -> (keyHasher2(a)<=>keyHasher2(b))","var scrambledEntries1 = entries.toSorted(randomSort1)","var scrambledEntries2 = entries.toSorted(randomSort2)"]},

        {"kind":"when","text":"We create two different `ValueSet` instances from the two scrambled list...","code":["var set1 = ValueSet.ofLinked(type).addAll(scrambledEntries1)","var set2 = ValueSet.ofLinked(type).addAll(scrambledEntries2)"]},

        {"kind":"then","text":"The two associations are equal!","code":["set1.equals(set2)"]},

        {"kind":"and","text":"They also have the same hash codes:","code":["set1.hashCode() == set2.hashCode()"]},

        {"kind":"when","text":"We create versions of the associations where parts are removed...","code":["var subList = entries.subList(0, (entries.size() * 0.5) as int)","var toRemove = subList.collect({it}).toSet()","var smallerSet1 = set1.removeAll(toRemove)","var smallerSet2 = set2.removeAll(toRemove)"]},

        {"kind":"then","text":"They are equal...","code":["smallerSet1 == smallerSet2","smallerSet1.hashCode() == smallerSet2.hashCode()"]},

        {"kind":"when","text":"We make them different by adding to them...","code":["var toAdd1 = subList.subList(0, (subList.size() * 0.5) as int).toSet()","var toAdd2 = subList.subList((subList.size() * 0.5) as int, subList.size()).toSet()","var lessSmallSet1 = smallerSet1.addAll(toAdd1)","var lessSmallSet2 = smallerSet2.addAll(toAdd2)"]},

        {"kind":"then","text":"","code":["lessSmallSet1.size() == lessSmallSet2.size()","lessSmallSet1 != lessSmallSet2","lessSmallSet1.hashCode() != lessSmallSet2.hashCode()"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [14]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The `equals` and `hashCode` implementations of a linked ValueSet works reliably after a serious of modifications. [15]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Here we test the implementation of the `equals` and `hashCode` methods exhaustively.\n            This may look like an exaggerated amount of test data and equality checks, but you\n            have to know that under the hood specifically the `equals` implementations are\n            highly optimized to specific cases which need to be covered.\n\n            More specifically, if there are only small differences between value sets,\n            we can avoid a lot of work due to two sets sharing most of their branches.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We create randomly sorted variants of the test data:","code":["var keyHasher = { (it.hashCode() ^ (it.hashCode() ** 2)) as int }","Comparator<Object> randomSort = (a, b) -> (keyHasher(a)<=>keyHasher(b))","entries.sort(randomSort)","var firstHalf = entries.subList(0, (entries.size() * 0.5) as int)","var secondHalf = entries.subList(1 + (entries.size() * 0.5) as int, entries.size())"]},

        {"kind":"and","text":"","code":["var originalSet = ValueSet.ofLinked(type).addAll(firstHalf)"]},

        {"kind":"when","text":"","code":["var quarter = firstHalf.subList(0, (firstHalf.size() * 0.5) as int)","var modifiedSet = originalSet.removeAll(quarter.toSet())"]},

        {"kind":"then","text":"","code":["modifiedSet != originalSet","modifiedSet.hashCode() != originalSet.hashCode()"]},

        {"kind":"when","text":"","code":["var subSubList1 = secondHalf.subList(0, (secondHalf.size() * 0.5) as int)","var subSubList2 = secondHalf.subList((secondHalf.size() * 0.5) as int, secondHalf.size())","var modifiedSet1 = modifiedSet.addAll(subSubList1)","var modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"when","text":"","code":["modifiedSet = modifiedSet.addAll(firstHalf)"]},

        {"kind":"then","text":"","code":["originalSet == modifiedSet","originalSet.hashCode() == modifiedSet.hashCode()"]},

        {"kind":"when","text":"","code":["modifiedSet1 = modifiedSet.addAll(subSubList1)","modifiedSet2 = modifiedSet.addAll(subSubList2)"]},

        {"kind":"then","text":"","code":["modifiedSet1.size() == modifiedSet2.size()","modifiedSet1 != modifiedSet2"]},

        {"kind":"where","text":"We use the following entry data source:","code":{"type":["Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String","Long","Short","Integer","String"],"entries":["(0..24).collect(it -> it as Long).toList()","(0..24).collect(it -> it as Short).toList()","(0..24).collect(it -> it).toList()","(0..24).collect(it -> String.valueOf(it)).toList()","(0..128).collect(it -> it as Long).toList()","(0..128).collect(it -> it as Short).toList()","(0..128).collect(it -> it).toList()","(0..128).collect(it -> String.valueOf(it)).toList()","(0..1_000).collect(it -> it as Long).toList()","(0..1_000).collect(it -> it as Short).toList()","(0..1_000).collect(it -> it).toList()","(0..1_000).collect(it -> String.valueOf(it)).toList()","(0..10_000).collect(it -> it as Long).toList()","(0..10_000).collect(it -> it as Short).toList()","(0..10_000).collect(it -> it).toList()","(0..10_000).collect(it -> String.valueOf(it)).toList()"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
