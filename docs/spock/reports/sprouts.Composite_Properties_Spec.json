{
  "className":"sprouts.Composite_Properties_Spec",
  "title":"Composite Property Views",
  "narrative":"A composite property view is an immutable property that is a live view of two other properties.\n    It is especially useful when you want to observe 2 properties merged into one maybe with some\n    sort of transformation applied to them.",
  "subjects":[],
  "statistics":{
    "runs":"5",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"A composite property view is a live view of 2 other properties.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A composite property view is an immutable property that is a live view of 2 other properties.\n            whose items are merged into one using a simple lambda function that takes the 2 items as arguments\n            and returns the merged item. The function is called every time one of the 2 properties changes, \n            and the view is updated with the result of the function.\n\n            It is especially useful when you want to observe 2 properties merged into one maybe with some\n            sort of transformation applied to them.\n\n            A classic example is to merge a forename and a surname into a full name.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We have 2properties modelling a forename and a surname of a person.","code":["Var<String> forename = Var.of(\"John\")","Var<String> surname = Var.of(\"Doe\")"]},

        {"kind":"and","text":"Now we create a view of the 2 properties that represents the full name.","code":["Val<String> fullName = Val.of(forename, surname, (f, s) -> f + \" \" + s)"]},

        {"kind":"expect","text":"Initially, the view has the expected value.","code":["fullName.get() == \"John Doe\""]},

        {"kind":"when","text":"We change the value of the properties.","code":["forename.set(\"Jane\")","surname.set(\"Smith\")"]},

        {"kind":"then","text":"The full name view has the new item which is the first name and the last name merged.","code":["fullName.get() == \"Jane Smith\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A composite property view created using the `Val.of(..)` does not update when receiving null items",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A composite property view created using the `Val.of(..)` does not allow null items.\n            This does not mean that the properties it is composed of cannot be nullable, it just means\n            that the items produced by the combiner function cannot be null.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We have 2 properties modelling the address of a person.","code":["Var<String> street = Var.of(\"Kingsway\")","Var<Integer> number = Var.of(123)"]},

        {"kind":"and","text":"Now we create a view of the 2 properties that represents the full address.","code":["Val<String> fullAddress = Val.of(street, number.viewAsString(), (s, n) -> s.isEmpty() ? null : s + \" \" + n)"]},

        {"kind":"expect","text":"The view does not allow null items.","code":["!fullAddress.allowsNull()"]},

        {"kind":"when","text":"We turn the street into an empty string to cause the view to produce a null item.","code":["street.set(\"\")"]},

        {"kind":"then","text":"The view will interpret the null item as the null object of the type of the view.","code":["fullAddress.get() == \"\""]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A non nullable composite property view may be created from two nullable properties.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Although a composite property view created using the `Val.of(..)` does permit null items\n            itself, it may be created from two nullable properties, as long as the combiner function\n            does not produce null items.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"\n            We have 2 properties modelling the weight and height of a person.\n            These properties are nullable for this example.\n        ","code":["Var<Double> weight = Var.ofNull(Double)","Var<Double> height = Var.ofNull(Double)"]},

        {"kind":"and","text":"A view of the 2 properties that represents the BMI.","code":["Val<Double> bmi = Val.of(weight, height, (w, h) -> w / (h * h))"]},

        {"kind":"expect","text":"The view does not allow null items.","code":["!bmi.allowsNull()"]},

        {"kind":"and","text":"\n            Note that both of these properties are empty initially, which\n            means that the combiner function will throw an exception when\n            invoked with their items.\n\n            Views however, try to be resilient to null-pointer exceptions,\n            and due to the fact that we are using the `Double` type here,\n            the view can resort to a default value: 0.0\n        ","code":["bmi.get() == 0"]},

        {"kind":"when","text":"We set the weight to 80 and the height to 1.8.","code":["weight.set(80d)","height.set(1.8d)"]},

        {"kind":"then","text":"The view has the expected value.","code":["bmi.get() == 24.691358024691358d"]},

        {"kind":"when","text":"We set the weight to null.","code":["weight.set(null)"]},

        {"kind":"then","text":"The view resorts back to the default value 0.0!","code":["bmi.get() == 0.0"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A composite property view created using the `Val.ofNullable(..)` allows null.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            A composite property view created using the `Val.ofNullable(..)` allows null items.\n            This means that the items produced by the combiner function can be null.\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We have 2 properties modelling the address of a person.","code":["Var<String> street = Var.of(\"Kingsway\")","Var<Integer> number = Var.of(123)"]},

        {"kind":"and","text":"Now we create a view of the 2 properties that represents the full address.","code":["Val<String> fullAddress = Val.ofNullable(street, number.viewAsString(), (s, n) -> s.isEmpty() ? null : s + \" \" + n)"]},

        {"kind":"expect","text":"The view allows null items.","code":["fullAddress.allowsNull()"]},

        {"kind":"when","text":"We turn the street into an empty string to cause the view to produce a null item.","code":["street.set(\"\")"]},

        {"kind":"then","text":"No exception is thrown.","code":["noExceptionThrown()"]},

        {"kind":"and","text":"The view produces a null item.","code":["fullAddress.orElseNull() == null"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Some non-nullable composite properties created using the `Val.of(..)` method cannot deal with null.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":["\n            Some non-nullable composite properties created using the `Lal.of(..)` method cannot deal with potential\n            null items produced by the combiner function, due to the type of the view\n            not having a default value (which is the case for primitive types or strings).\n        "]
      },
      "blocks":[
        {"kind":"given","text":"We are using `Date` based properties.","code":["Var<Date> date1 = Var.ofNullable(Date.class, new Date())","Var<Date> date2 = Var.ofNullable(Date.class, new Date())"]},

        {"kind":"and","text":"A view of the 2 properties that represents the earliest date, or null if any of the dates is null.","code":["Val<Date> earliestDate = Val.of(date1, date2, (d1, d2) -> (d1==null||d2==null) ? null : d1.before(d2) ? d1 : d2)"]},

        {"kind":"expect","text":"The view tells us that it does not allow null items.","code":["!earliestDate.allowsNull()"]},

        {"kind":"and","text":"It contains an initial value.","code":["earliestDate.get() != null"]},

        {"kind":"when","text":"We set the first date to null.","code":["date1.set(null)"]},

        {"kind":"then","text":"\n            You might expect the view to either produce a null item, or to throw an exception.\n            But, you have to remember that a view tries to be resilient to exceptions, which \n            includes null-pointer exceptions. \n\n            So what this means in practice is that in this case, the view will\n            log a warning and keep the last value it had.\n        ","code":["noExceptionThrown()"]},

        {"kind":"and","text":"The view still contains the initial value.","code":["earliestDate.get() != null"]},

        {"kind":"when","text":"\n            We take a look at a more unfortunate scenario where at least one of the dates is null initially,\n            then this whole situation is not going to work out without an exception being thrown\n            at you.\n        ","code":["date1 = Var.ofNull(Date)","date2 = Var.of(new Date())","earliestDate = Val.of(date1, date2, (d1, d2) -> (d1==null) ? null : d1.before(d2) ? d1 : d2)"]},

        {"kind":"then","text":"An exception is thrown.","code":["thrown(NullPointerException)"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
