{
  "className":"sprouts.Sequence_Invariance_Spec",
  "title":"Sequence Invariance",
  "narrative":"This specification tests the functional invariance between\n    operations on the mutable `Vars` type and the immutable `Tuple` type.",
  "subjects":["sprouts.Vars","sprouts.Tuple"],
  "statistics":{
    "runs":"69",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [14]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [15]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [16]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [17]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [18]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [19]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [20]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [21]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [22]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [23]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [24]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [25]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [26]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [27]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [28]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [29]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [30]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [31]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [32]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [33]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [34]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"Various operations between `Tuple` and `Vars` are invariant. [35]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"when","text":"We crate a tuple and a property list and then run them through their invariant operations.","code":["var result1 = tupleOp(Tuple.of(Object, input))","var result2  = varsOp(Vars.of(Object, input as Object[]))"]},

        {"kind":"then","text":"The results are equal to each other and to the expected result.","code":["result1.toList() == expected","result2.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[3, 6]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"tupleOp":["Tuple::reversed","Tuple::reversed","Tuple::removeFirst","Tuple::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it > 1 } }","{ s->s.retainIf { it < 2 } }","{ s->s.retainIf { it > 2 && it < 5 } }","{ s->s.retainIf { it < 2 || it > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it > 1 } }","{ s->s.removeIf { it < 2 } }","{ s->s.removeIf { it > 2 && it < 5 } }","{ s->s.removeIf { it < 2 || it > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.map { it } }","{ s->s.map { it * 2 } }","{ s->s.mapTo(String,{it+\" cents\"}) }","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[1, 2, 3]","[2, 4, 6]","[\"3 cents\", \"6 cents\"]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [0]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [1]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [2]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [3]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [4]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [5]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [6]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [7]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [8]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [9]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [10]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [11]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [12]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [13]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [14]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [15]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [16]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [17]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [18]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [19]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [20]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [21]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [22]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [23]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [24]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [25]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [26]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [27]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [28]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [29]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [30]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [31]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A property list and its changes are always invariant to its list view. [32]",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"","code":["var propertyList = Vars.of(Object, input as Object[])","var propertyListView = propertyList.view()"]},

        {"kind":"when","text":"We run the property list through the operation.","code":["varsOp(propertyList)"]},

        {"kind":"then","text":"The property list and its view have the same contents.","code":["propertyList.toList() == propertyListView.toList()"]},

        {"kind":"and","text":"","code":["propertyListView.toList() == expected"]},

        {"kind":"where","text":"","code":{"input":["[Byte]","[1, 2, 3]","[3, 2, 1, 0]","[3, 2, 1, 0]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3]","[1, 2, 3, 4, 5]","[1, 2, 3, 4, 5]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]","[1, 2, 3, 1, 2]"],"varsOp":["Vars::reversed","Vars::reversed","Vars::removeFirst","Vars::removeLast","{ s->s.retainIf { it.get() > 1 } }","{ s->s.retainIf { it.get() < 2 } }","{ s->s.retainIf { it.get() > 2 && it.get() < 5 } }","{ s->s.retainIf { it.get() < 2 || it.get() > 4 } }","{ s->s.removeRange(1, 3) }","{ s->s.setAt(1, 10) }","{ s->s.addAt(1, 10) }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.add(10) }","{ s->s.addAll(10, 20) }","{ s->s.addAll(Tuple.of(10, 20)) }","{ s->s.addAll([10, 20]) }","{ s->s.clear() }","{ s->s.addAllAt(1, 10, 20) }","{ s->s.addAllAt(1, Tuple.of(10, 20)) }","{ s->s.addAllAt(1, [10, 20]) }","{ s->s.removeIf { it.get() > 1 } }","{ s->s.removeIf { it.get() < 2 } }","{ s->s.removeIf { it.get() > 2 && it.get() < 5 } }","{ s->s.removeIf { it.get() < 2 || it.get() > 4 } }","{ s->s.makeDistinct() }","{ s->s.removeRange(1, 3) }","{ s->s.removeFirst() }","{ s->s.removeLast() }","{ s->s.removeAt(1) }","{ s->s.removeAt(1, 2) }","{ s->s.addAt(1, 10) }","{ s->s.setRange(1, 3, 10) }"],"expected":["[Byte]","[3, 2, 1]","[2, 1, 0]","[3, 2, 1]","[2, 3]","[1]","[3, 4]","[1, 5]","[1, 4, 5]","[1, 10, 3, 4, 5]","[1, 10, 2, 3, 4, 5]","[1, 3, 4, 5]","[1, 4, 5]","[1, 2, 3, 4, 5, 10]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[1, 2, 3, 10, 20]","[]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1, 10, 20, 2, 3]","[1]","[2, 3]","[1, 2, 5]","[2, 3, 4]","[1, 2, 3]","[1, 1, 2]","[2, 3, 1, 2]","[1, 2, 3, 1]","[1, 3, 1, 2]","[1, 1, 2]","[1, 10, 2, 3, 1, 2]","[1, 10, 10, 1, 2]"]}}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
