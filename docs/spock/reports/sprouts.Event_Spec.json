{
  "className":"sprouts.Event_Spec",
  "title":"Events",
  "narrative":"Sprouts models events using 2 simple interfaces,\n    the `sprouts.Observable` interface\n    and the trigger-able `Event` interface where `Event` is a sub type of `Observable`.\n    The `Event` interface is used to fire events, and because it extends the `Observable` interface\n    it allows you to listen to an event through the registration of `Observer` instances.\n\n    `Event`s can be created using various factory methods (like for example `Event.create()`),\n    one of which even allows the specification of a custom `Event.Executor`\n    which can be used to control on which thread(s) the event is fired.",
  "subjects":["sprouts.Event","sprouts.Observer","sprouts.Observable"],
  "statistics":{
    "runs":"5",
    "successRate":"100.0%",
    "failures":"0",
    "errors":"0",
    "skipped":"0",
    "duration":"?"
  },
  "headers":[],"tags":{},"see":[],
  "features":[ 
    {
      "id":"We can create an event using the \"Event.create\" factory method.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A mocked observer.","code":["var observer = Mock(Observer)"]},

        {"kind":"and","text":"An event.","code":["var event = Event.create()"]},

        {"kind":"when","text":"We register the observer with the event.","code":["event.subscribe(observer)"]},

        {"kind":"and","text":"We fire the event.","code":["event.fire()"]},

        {"kind":"then","text":"The listener is notified.","code":["1 * observer.invoke()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can create an event using the \"Event.using\" factory method with a custom executor.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A listener.","code":["var listener = Mock(Observer)"]},

        {"kind":"and","text":"An event.","code":["var event = Event.using(Event.Executor.SAME_THREAD)"]},

        {"kind":"when","text":"We register the listener with the event.","code":["event.subscribe(listener)"]},

        {"kind":"and","text":"We fire the event.","code":["event.fire()"]},

        {"kind":"then","text":"The listener is notified.","code":["1 * listener.invoke()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"The \"Event.of\" factory method is a shortcut for creating an event with an initial listener.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A listener.","code":["var listener = Mock(Observer)"]},

        {"kind":"and","text":"An event with the mock listener set.","code":["var event = Event.of(listener)"]},

        {"kind":"when","text":"We fire the event.","code":["event.fire()"]},

        {"kind":"then","text":"The listener is notified.","code":["1 * listener.invoke()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"A listener can be unsubscribed from an Event.",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A listener.","code":["var listener = Mock(Observer)"]},

        {"kind":"and","text":"An event.","code":["var event = Event.create()"]},

        {"kind":"when","text":"We register the listener with the event.","code":["event.subscribe(listener)"]},

        {"kind":"and","text":"We fire the event.","code":["event.fire()"]},

        {"kind":"then","text":"The listener is notified.","code":["1 * listener.invoke()"]},

        {"kind":"when","text":"We unsubscribe the listener from the event.","code":["event.unsubscribe(listener)"]},

        {"kind":"and","text":"We fire the event.","code":["event.fire()"]},

        {"kind":"then","text":"The listener is not notified again.","code":["0 * listener.invoke()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    },
  
    {
      "id":"We can unsubscribe all Listeners from an Event!",
      "result":"PASS",
      "duration":"?",
      "iterations":{
      "tags":{},"see":[],"extraInfo":[]
      },
      "blocks":[
        {"kind":"given","text":"A few mocked listeners.","code":["var listener1 = Mock(Observer)","var listener2 = Mock(Observer)","var listener3 = Mock(Observer)"]},

        {"kind":"and","text":"An event.","code":["var event = Event.create()"]},

        {"kind":"when","text":"We register the listeners with the event.","code":["event.subscribe(listener1)","event.subscribe(listener2)","event.subscribe(listener3)"]},

        {"kind":"and","text":"We fire the event.","code":["event.fire()"]},

        {"kind":"then","text":"The listeners are notified.","code":["1 * listener1.invoke()","1 * listener2.invoke()","1 * listener3.invoke()"]},

        {"kind":"when","text":"We unsubscribe all listeners from the event.","code":["event.unsubscribeAll()"]},

        {"kind":"and","text":"We fire the event again.","code":["event.fire()"]},

        {"kind":"then","text":"The listeners are not notified again.","code":["0 * listener1.invoke()","0 * listener2.invoke()","0 * listener3.invoke()"]}
      ],
      "problems":{"dataValues":[], "errors":[]}
    }
  
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}
