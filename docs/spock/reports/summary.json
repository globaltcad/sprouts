{
  "project": "Swing-Tree",
  "version": "0.2.0",
  "created": "Sun Jun 18 23:52:26 CEST 2023",
  "statistics":{
    "runs":"9",
    "passed":"8",
    "failed":"1",
    "featureFailures":"0",
    "successRate":"0.8888888888888888",
    "duration":"426.0"
  },
  "specifications": [{
      "className":"sprouts.MVVM_Unit_Test_Spec",
      "title":"Writing Unit Tests for View Models",
      "narrative":"Not only is Sprouts a framework for building UIs, it is also a framework for\n    building view models based on its built in property types. \n    This specification demonstrates how to write unit tests\n    for the example view models in the test suite.",
      "featureCount":"2",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"32",
      "executedFeatures":[{"id":"The register button does nothing if the inputs are not all valid.","extraInfo":[]},{"id":"The registration view model will display feedback about invalid inputs.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"sprouts.Properties_List_Spec",
      "title":"Lists of Properties",
      "narrative":"Just like properties you can create lists of properties\n    and then bind them to UI components.\n    They are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    This specification shows how to use the various\n    methods exposed by the property lists classes, \n    namely \"Vals\" (immutable) and \"Vars\" (mutable).",
      "featureCount":"32",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"211",
      "executedFeatures":[{"id":"A list of properties can be turned into an immutable \"Vals\" list using the \"toVals\" method.","extraInfo":[]},{"id":"A list of properties can be turned into lists, sets or maps using various convenience methods.","extraInfo":[]},{"id":"Both the \"Vars\" and immutable \"Vals\" types can be used for functional programming.","extraInfo":[]},{"id":"Change listeners registered on a property list will be called when the list is sorted.","extraInfo":[]},{"id":"Checkout these cool one liners!","extraInfo":[]},{"id":"Items can be popped off a property list using a predicate.","extraInfo":[]},{"id":"Items can be removed from a property list using a predicate.","extraInfo":[]},{"id":"Just like a regular \"Var\" property you can register change listeners on \"Vars\".","extraInfo":[]},{"id":"Leading and trailing items can be popped off a property list.","extraInfo":[]},{"id":"Lists of properties can be sorted based on their natural order through the \"sort\" method.","extraInfo":[]},{"id":"Lists of properties can be sorted using a custom comparator through the \"sort\" method.","extraInfo":[]},{"id":"Map a \"Vals\" instance from one type of properties to another.","extraInfo":[]},{"id":"Map a \"Vars\" instance from one type of properties to another.","extraInfo":[]},{"id":"Multiple properties can be modelled through the \"Vars\" and \"Vals\" classes.","extraInfo":[]},{"id":"Properties can be popped off a property list using a predicate.","extraInfo":[]},{"id":"Properties can be removed from a property list using a predicate.","extraInfo":[]},{"id":"The \"Vals\" and \"Vars\" instances have descriptive String representations.","extraInfo":[]},{"id":"The \"Vars\" is a list of properties which can grow and shrink.","extraInfo":[]},{"id":"The \"makeDistinct\" method on a mutable list of properties modifies the list in-place.","extraInfo":[]},{"id":"The \"popAt\" method return the removed property.","extraInfo":[]},{"id":"The \"retainAll\" method does not trigger an \"onChange\" event if the list is not changed.","extraInfo":[]},{"id":"The display action of a property or list of properties will not be called if they report \"canBeRemoved()\"","extraInfo":[]},{"id":"The listeners registered in property lists will be informed what type of modification occurred.","extraInfo":[]},{"id":"The properties of one property list can be added to another property list.","extraInfo":[]},{"id":"Use \"anyEmpty\" to check if any of the properties are empty.","extraInfo":[]},{"id":"Use \"none\" to check if none of the properties match the given predicate.","extraInfo":[]},{"id":"Use \"removeOrThrow\" to to guarantee the removal of a property.","extraInfo":[]},{"id":"Using \"addAll\" to add multiple things to a property list will only trigger the change listeners once!","extraInfo":[]},{"id":"Various kinds of methods that mutate a property list will only trigger an \"onChange\" event once, even if multiple items are affected.","extraInfo":[]},{"id":"You can create a \"Vars\" list from a regular List of properties.","extraInfo":[]},{"id":"You can create the \"Vars\"/\"Vals\" property lists from property instances.","extraInfo":[]},{"id":"You can remove n leading or trailing entries from a property list.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"sprouts.Properties_Spec",
      "title":"Properties",
      "narrative":"Properties are a powerful tool to model the state \n    as well as business logic of your UI without actually depending on it.\n    This is especially useful for testing your UIs logic.\n    Therefore properties are a root concept in the Sprouts library.\n    The decoupling between your UI and the UIs state and logic \n    is achieved by binding properties to UI components.\n    This specification shows you how to model UI state \n    and business logic using properties \n    and how to bind them to UI components.",
      "featureCount":"18",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"29",
      "executedFeatures":[{"id":"A property can be converted to an Optional.","extraInfo":[]},{"id":"A property constructed using the \"of\" factory method, does not allow null items.","extraInfo":[]},{"id":"Changing the value of a property through the \"act\" method will also affect its views","extraInfo":[]},{"id":"Conveniently compare properties with another item using \"is\", \"isOneOf\" or \"isNot\"","extraInfo":[]},{"id":"Conveniently compare the item of a property with another item using \"is\", \"isOneOf\" or \"isNot\"","extraInfo":[]},{"id":"Properties are similar to the \"Optional\" class, you can map them and see if they are empty or not.","extraInfo":[]},{"id":"Properties are simple wrappers around a value","extraInfo":[]},{"id":"Properties can be bound by subscribing to them using the \"onSetItem(..)\" method.","extraInfo":[]},{"id":"Properties not only have a value but also a type and id!","extraInfo":[]},{"id":"The \"get\" method will throw an exception if there is no element present.","extraInfo":[]},{"id":"The \"ifPresent\" method allows us to see if a property has a value or not.","extraInfo":[]},{"id":"The \"withID(..)\" method produces a new property with all bindings inherited.","extraInfo":[]},{"id":"The UI uses the \"act(T)\" method to change the property state to avoid feedback looping.","extraInfo":[]},{"id":"The equality and hash code of a property are based on its value, type and id!","extraInfo":[]},{"id":"The string representation of a property will give you all the information you need.","extraInfo":[]},{"id":"There are 2 types of properties, an immutable property, and its mutable sub-type.","extraInfo":[]},{"id":"There are various kinds of convenience methods for creating live view of properties.","extraInfo":[]},{"id":"Use the \"viewAs\" method to create a dynamically updated view of a property.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"sprouts.Property_Binding_Spec",
      "title":"Property Binding",
      "narrative":"This specification shows you how to bind properties to \n    the states of common types UI components.",
      "featureCount":"11",
      "failures":"0",
      "errors":"11",
      "skipped":"0" ,
      "successRate":"0.0",
      "duration":"35",
      "executedFeatures":[{"id":"Bind to both width and height independently if you want to.","extraInfo":[]},{"id":"Enable or disable the split items of a JSplitButton through properties.","extraInfo":[]},{"id":"Minimum as well as maximum height of UI components can be modelled using integer properties.","extraInfo":[]},{"id":"Simple integer properties can be bound to the width or height of components.","extraInfo":[]},{"id":"The focusability of a UI component can be modelled dynamically using boolean properties.","extraInfo":[]},{"id":"The visibility of a UI component can be modelled dynamically using boolean properties.","extraInfo":[]},{"id":"The width and height of UI components can be modelled using integer properties.","extraInfo":[]},{"id":"We can bind to the color of a component.","extraInfo":[]},{"id":"We can bind to the text of a component.","extraInfo":[]},{"id":"We can enable and disable a UI component dynamically through property binding.","extraInfo":[]},{"id":"We can select or unselect a UI component dynamically through properties.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"sprouts.Property_Safety_Spec",
      "title":"Property Null and Mutability Safety",
      "narrative":"Properties are a core concept in Sprouts. They are in essence\n    just wrapper classes used to represent the state of your views.\n    Because of this, it is important that properties are\n    are nullable only when they need to be, and that they are\n    mutable only when they need to be.",
      "featureCount":"7",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"10",
      "executedFeatures":[{"id":"\"Vals\", a list of properties, is immutable.","extraInfo":[]},{"id":"A \"Val\" instance is immutable.","extraInfo":[]},{"id":"A \"Var\" may only wrap null if it is created as nullable.","extraInfo":[]},{"id":"A property can only wrap null if we specify a type class.","extraInfo":[]},{"id":"An empty property will throw an exception if you try to access its value.","extraInfo":[]},{"id":"The \"get\" method of a property throws an exception if the property is null.","extraInfo":[]},{"id":"The \"orElseNull\" method should be used instead of \"orElseThrow\" if you are fine with null items.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"sprouts.Event_Spec",
      "title":"Events",
      "narrative":"Sprouts models events using 2 simple interfaces, \n    the observable `Noticeable` interface\n    and the fireable `Event` interface which is a sub type of `Noticeable`.\n    The `Event` interface is used to fire events, and the `Noticeable` interface\n    is used to listen for events by registering `Listener` instances.\n\n    The `Event` interface is a sub type of `Noticeable` and as such\n    can be used to listen for events as well as fire them.\n\n    `Event`s can be created using various factory methods on the `Events` class,\n    one of which even allows the specification of a custom `Event.Executor`\n    which can be used to control on which thread(s) the event is fired.",
      "featureCount":"5",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"72",
      "executedFeatures":[{"id":"A listener can be unsubscribed from an Event.","extraInfo":[]},{"id":"The \"Event.of\" factory method is a shortcut for creating an event with an initial listener.","extraInfo":[]},{"id":"We can create an event using the \"Event.create\" factory method.","extraInfo":[]},{"id":"We can create an event using the \"Event.using\" factory method with a custom executor.","extraInfo":[]},{"id":"We can unsubscribe all Listeners from an Event!","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"sprouts.Property_Event_Delegates_Spec",
      "title":"Property Event Delegates",
      "narrative":"The properties and property lists in Sprouts allow you to listen for changes\n    by registering action listener instances to the property or property list.\n    These listener types receive so called delegate instances which are used\n    to access the property or property list that was changed in the action\n    in an immutable way.",
      "featureCount":"5",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"9",
      "executedFeatures":[{"id":"The delegate of a property change action exposes a property that is an immutable clone.","extraInfo":[]},{"id":"The delegate of a property list change action exposes a list that is an immutable clone.","extraInfo":[]},{"id":"The delegate of a property list change action exposes a list that is an immutable clone.","extraInfo":[]},{"id":"The delegate of a property list change action has a descriptive string representation.","extraInfo":[]},{"id":"The delegate of a property user action exposes a property that is an immutable clone.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"sprouts.Result_Spec",
      "title":"Results",
      "narrative":"The `Result` interface is used to represent the optional result of an operation\n    as well as a list of problems that occurred during the operation.\n\n    It is a sub type of the `Val` property and as such can be used to represent a value\n    that is immutable and can be observed for changes.\n\n    The default result implementation indirectly exposed by its factory methods\n    is immutable and thread safe, effectively making it a monadic value\n    similar to the `Optional` type in Java 8.",
      "featureCount":"7",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"15",
      "executedFeatures":[{"id":"A result can be created from multiple problems.","extraInfo":[]},{"id":"Create a Result from a list with some problems.","extraInfo":[]},{"id":"Just like a `Val` property, a Result has a type and id.","extraInfo":[]},{"id":"Results can be mapped to a property.","extraInfo":[]},{"id":"Results can be turned into an Optional.","extraInfo":[]},{"id":"We can create a result from any kind of value.","extraInfo":[]},{"id":"You can create a Result from a list.","extraInfo":[]}],
      "ignoredFeatures":[]
    },{
      "className":"sprouts.Problem_Spec",
      "title":"Nothing but Problems",
      "narrative":"`Problem` instances are part of `Result` instances \n    which are used to represent the optional result of an operation\n    as well as a list of problems that occurred during the operation.\n\n    `Problem` instances tell us what went wrong and why\n    in various situations where we need to know.\n    They are immutable and thread safe and\n    are intended to be used in functional designs.",
      "featureCount":"3",
      "failures":"0",
      "errors":"0",
      "skipped":"0" ,
      "successRate":"1.0",
      "duration":"13",
      "executedFeatures":[{"id":"A Problem can be created from an exception.","extraInfo":[]},{"id":"A Problem may have a reporter.","extraInfo":[]},{"id":"We can create a problem from a title.","extraInfo":[]}],
      "ignoredFeatures":[]
    }
  ],
  "generator":"https://github.com/renatoathaydes/spock-reports"
}